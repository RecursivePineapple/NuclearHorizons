package com.recursive_pineapple.nuclear_horizons.recipes;

import bartworks.system.material.WerkstoffLoader;
import com.recursive_pineapple.nuclear_horizons.reactors.items.material.MaterialsNuclear;
import com.recursive_pineapple.nuclear_horizons.reactors.items.material.MaterialsChemical;
import goodgenerator.items.GGMaterial;
import gregtech.api.enums.Materials;
import gregtech.api.enums.MaterialsKevlar;
import gregtech.api.enums.MaterialsUEVplus;
import gtPlusPlus.core.material.MaterialMisc;
import gtPlusPlus.core.material.MaterialsAlloy;
import gtPlusPlus.core.material.MaterialsElements;
import gtPlusPlus.core.material.nuclear.MaterialsFluorides;
import gtPlusPlus.core.material.nuclear.MaterialsNuclides;
import gtnhlanth.common.register.BotWerkstoffMaterialPool;
import gtnhlanth.common.register.WerkstoffMaterialPool;

@SuppressWarnings("unused")
public class GTMats {
    private GTMats() { }

    //#region src/main/java/gregtech/api/enums/Materials.java
    public static final MaterialWrapper ALUMINIUM = MaterialWrapper.of(() -> Materials.Aluminium);
    public static final MaterialWrapper AMERICIUM = MaterialWrapper.of(() -> Materials.Americium);
    public static final MaterialWrapper ANTIMONY = MaterialWrapper.of(() -> Materials.Antimony);
    public static final MaterialWrapper ARGON = MaterialWrapper.of(() -> Materials.Argon);
    public static final MaterialWrapper ARSENIC = MaterialWrapper.of(() -> Materials.Arsenic);
    public static final MaterialWrapper BARIUM = MaterialWrapper.of(() -> Materials.Barium);
    public static final MaterialWrapper BERYLLIUM = MaterialWrapper.of(() -> Materials.Beryllium);
    public static final MaterialWrapper BISMUTH = MaterialWrapper.of(() -> Materials.Bismuth);
    public static final MaterialWrapper BORON = MaterialWrapper.of(() -> Materials.Boron);
    public static final MaterialWrapper CAESIUM = MaterialWrapper.of(() -> Materials.Caesium);
    public static final MaterialWrapper CALCIUM = MaterialWrapper.of(() -> Materials.Calcium);
    public static final MaterialWrapper CARBON = MaterialWrapper.of(() -> Materials.Carbon);
    public static final MaterialWrapper CADMIUM = MaterialWrapper.of(() -> Materials.Cadmium);
    public static final MaterialWrapper CERIUM = MaterialWrapper.of(() -> Materials.Cerium);
    public static final MaterialWrapper CHLORINE = MaterialWrapper.of(() -> Materials.Chlorine);
    public static final MaterialWrapper CHROME = MaterialWrapper.of(() -> Materials.Chrome);
    public static final MaterialWrapper COBALT = MaterialWrapper.of(() -> Materials.Cobalt);
    public static final MaterialWrapper COPPER = MaterialWrapper.of(() -> Materials.Copper);
    public static final MaterialWrapper DEUTERIUM = MaterialWrapper.of(() -> Materials.Deuterium);
    public static final MaterialWrapper DYSPROSIUM = MaterialWrapper.of(() -> Materials.Dysprosium);
    public static final MaterialWrapper EMPTY = MaterialWrapper.of(() -> Materials.Empty);
    public static final MaterialWrapper ERBIUM = MaterialWrapper.of(() -> Materials.Erbium);
    public static final MaterialWrapper EUROPIUM = MaterialWrapper.of(() -> Materials.Europium);
    public static final MaterialWrapper FLUORINE = MaterialWrapper.of(() -> Materials.Fluorine);
    public static final MaterialWrapper GADOLINIUM = MaterialWrapper.of(() -> Materials.Gadolinium);
    public static final MaterialWrapper GALLIUM = MaterialWrapper.of(() -> Materials.Gallium);
    public static final MaterialWrapper GOLD = MaterialWrapper.of(() -> Materials.Gold);
    public static final MaterialWrapper HOLMIUM = MaterialWrapper.of(() -> Materials.Holmium);
    public static final MaterialWrapper HYDROGEN = MaterialWrapper.of(() -> Materials.Hydrogen);
    public static final MaterialWrapper HELIUM = MaterialWrapper.of(() -> Materials.Helium);
    public static final MaterialWrapper HELIUM_3 = MaterialWrapper.of(() -> Materials.Helium_3);
    public static final MaterialWrapper INDIUM = MaterialWrapper.of(() -> Materials.Indium);
    public static final MaterialWrapper IRIDIUM = MaterialWrapper.of(() -> Materials.Iridium);
    public static final MaterialWrapper IRON = MaterialWrapper.of(() -> Materials.Iron);
    public static final MaterialWrapper LANTHANUM = MaterialWrapper.of(() -> Materials.Lanthanum);
    public static final MaterialWrapper LEAD = MaterialWrapper.of(() -> Materials.Lead);
    public static final MaterialWrapper LITHIUM = MaterialWrapper.of(() -> Materials.Lithium);
    public static final MaterialWrapper LUTETIUM = MaterialWrapper.of(() -> Materials.Lutetium);
    public static final MaterialWrapper MAGIC = MaterialWrapper.of(() -> Materials.Magic);
    public static final MaterialWrapper MAGNESIUM = MaterialWrapper.of(() -> Materials.Magnesium);
    public static final MaterialWrapper MANGANESE = MaterialWrapper.of(() -> Materials.Manganese);
    public static final MaterialWrapper MERCURY = MaterialWrapper.of(() -> Materials.Mercury);
    public static final MaterialWrapper MOLYBDENUM = MaterialWrapper.of(() -> Materials.Molybdenum);
    public static final MaterialWrapper NEODYMIUM = MaterialWrapper.of(() -> Materials.Neodymium);
    public static final MaterialWrapper NEUTRONIUM = MaterialWrapper.of(() -> Materials.Neutronium);
    public static final MaterialWrapper NICKEL = MaterialWrapper.of(() -> Materials.Nickel);
    public static final MaterialWrapper NIOBIUM = MaterialWrapper.of(() -> Materials.Niobium);
    public static final MaterialWrapper NITROGEN = MaterialWrapper.of(() -> Materials.Nitrogen);
    public static final MaterialWrapper OSMIUM = MaterialWrapper.of(() -> Materials.Osmium);
    public static final MaterialWrapper OXYGEN = MaterialWrapper.of(() -> Materials.Oxygen);
    public static final MaterialWrapper PALLADIUM = MaterialWrapper.of(() -> Materials.Palladium);
    public static final MaterialWrapper PHOSPHORUS = MaterialWrapper.of(() -> Materials.Phosphorus);
    public static final MaterialWrapper PLATINUM = MaterialWrapper.of(() -> Materials.Platinum);
    public static final MaterialWrapper PLUTONIUM = MaterialWrapper.of(() -> Materials.Plutonium);
    public static final MaterialWrapper PLUTONIUM241 = MaterialWrapper.of(() -> Materials.Plutonium241);
    public static final MaterialWrapper POTASSIUM = MaterialWrapper.of(() -> Materials.Potassium);
    public static final MaterialWrapper PRASEODYMIUM = MaterialWrapper.of(() -> Materials.Praseodymium);
    public static final MaterialWrapper PROMETHIUM = MaterialWrapper.of(() -> Materials.Promethium);
    public static final MaterialWrapper RADON = MaterialWrapper.of(() -> Materials.Radon);
    public static final MaterialWrapper RUBIDIUM = MaterialWrapper.of(() -> Materials.Rubidium);
    public static final MaterialWrapper SAMARIUM = MaterialWrapper.of(() -> Materials.Samarium);
    public static final MaterialWrapper SCANDIUM = MaterialWrapper.of(() -> Materials.Scandium);
    public static final MaterialWrapper SILICON = MaterialWrapper.of(() -> Materials.Silicon);
    public static final MaterialWrapper SILVER = MaterialWrapper.of(() -> Materials.Silver);
    public static final MaterialWrapper SODIUM = MaterialWrapper.of(() -> Materials.Sodium);
    public static final MaterialWrapper STRONTIUM = MaterialWrapper.of(() -> Materials.Strontium);
    public static final MaterialWrapper SULFUR = MaterialWrapper.of(() -> Materials.Sulfur);
    public static final MaterialWrapper TANTALUM = MaterialWrapper.of(() -> Materials.Tantalum);
    public static final MaterialWrapper TELLURIUM = MaterialWrapper.of(() -> Materials.Tellurium);
    public static final MaterialWrapper TERBIUM = MaterialWrapper.of(() -> Materials.Terbium);
    public static final MaterialWrapper THORIUM = MaterialWrapper.of(() -> Materials.Thorium);
    public static final MaterialWrapper THULIUM = MaterialWrapper.of(() -> Materials.Thulium);
    public static final MaterialWrapper TIN = MaterialWrapper.of(() -> Materials.Tin);
    public static final MaterialWrapper TITANIUM = MaterialWrapper.of(() -> Materials.Titanium);
    public static final MaterialWrapper TRITANIUM = MaterialWrapper.of(() -> Materials.Tritanium);
    public static final MaterialWrapper TRITIUM = MaterialWrapper.of(() -> Materials.Tritium);
    public static final MaterialWrapper TUNGSTEN = MaterialWrapper.of(() -> Materials.Tungsten);
    public static final MaterialWrapper URANIUM = MaterialWrapper.of(() -> Materials.Uranium);
    public static final MaterialWrapper URANIUM235 = MaterialWrapper.of(() -> Materials.Uranium235);
    public static final MaterialWrapper VANADIUM = MaterialWrapper.of(() -> Materials.Vanadium);
    public static final MaterialWrapper YTTERBIUM = MaterialWrapper.of(() -> Materials.Ytterbium);
    public static final MaterialWrapper YTTRIUM = MaterialWrapper.of(() -> Materials.Yttrium);
    public static final MaterialWrapper ZINC = MaterialWrapper.of(() -> Materials.Zinc);
    public static final MaterialWrapper GRADE1PURIFIEDWATER = MaterialWrapper.of(() -> Materials.Grade1PurifiedWater);
    public static final MaterialWrapper GRADE2PURIFIEDWATER = MaterialWrapper.of(() -> Materials.Grade2PurifiedWater);
    public static final MaterialWrapper GRADE3PURIFIEDWATER = MaterialWrapper.of(() -> Materials.Grade3PurifiedWater);
    public static final MaterialWrapper GRADE4PURIFIEDWATER = MaterialWrapper.of(() -> Materials.Grade4PurifiedWater);
    public static final MaterialWrapper GRADE5PURIFIEDWATER = MaterialWrapper.of(() -> Materials.Grade5PurifiedWater);
    public static final MaterialWrapper GRADE6PURIFIEDWATER = MaterialWrapper.of(() -> Materials.Grade6PurifiedWater);
    public static final MaterialWrapper GRADE7PURIFIEDWATER = MaterialWrapper.of(() -> Materials.Grade7PurifiedWater);
    public static final MaterialWrapper GRADE8PURIFIEDWATER = MaterialWrapper.of(() -> Materials.Grade8PurifiedWater);
    public static final MaterialWrapper FLOCCULATIONWASTELIQUID = MaterialWrapper.of(() -> Materials.FlocculationWasteLiquid);
    public static final MaterialWrapper FLEROVIUM = MaterialWrapper.of(() -> Materials.Flerovium);
    public static final MaterialWrapper ORGANIC = MaterialWrapper.of(() -> Materials.Organic);
    public static final MaterialWrapper ANYCOPPER = MaterialWrapper.of(() -> Materials.AnyCopper);
    public static final MaterialWrapper ANYBRONZE = MaterialWrapper.of(() -> Materials.AnyBronze);
    public static final MaterialWrapper ANYIRON = MaterialWrapper.of(() -> Materials.AnyIron);
    public static final MaterialWrapper ANYRUBBER = MaterialWrapper.of(() -> Materials.AnyRubber);
    public static final MaterialWrapper ANYSYNTHETICRUBBER = MaterialWrapper.of(() -> Materials.AnySyntheticRubber);
    public static final MaterialWrapper CRYSTAL = MaterialWrapper.of(() -> Materials.Crystal);
    public static final MaterialWrapper QUARTZ = MaterialWrapper.of(() -> Materials.Quartz);
    public static final MaterialWrapper METAL = MaterialWrapper.of(() -> Materials.Metal);
    public static final MaterialWrapper UNKNOWN = MaterialWrapper.of(() -> Materials.Unknown);
    public static final MaterialWrapper COBBLESTONE = MaterialWrapper.of(() -> Materials.Cobblestone);
    public static final MaterialWrapper BRICKNETHER = MaterialWrapper.of(() -> Materials.BrickNether);
    public static final MaterialWrapper SERPENTINE = MaterialWrapper.of(() -> Materials.Serpentine);
    public static final MaterialWrapper FLUX = MaterialWrapper.of(() -> Materials.Flux);
    public static final MaterialWrapper OSMIUMTETROXIDE = MaterialWrapper.of(() -> Materials.OsmiumTetroxide);
    public static final MaterialWrapper RUBBERTREESAP = MaterialWrapper.of(() -> Materials.RubberTreeSap);
    public static final MaterialWrapper PHASEDIRON = MaterialWrapper.of(() -> Materials.PhasedIron);
    public static final MaterialWrapper PHASEDGOLD = MaterialWrapper.of(() -> Materials.PhasedGold);
    public static final MaterialWrapper HEEENDIUM = MaterialWrapper.of(() -> Materials.HeeEndium);
    public static final MaterialWrapper TESLATITE = MaterialWrapper.of(() -> Materials.Teslatite);
    public static final MaterialWrapper FLUIX = MaterialWrapper.of(() -> Materials.Fluix);
    public static final MaterialWrapper DARKTHAUMIUM = MaterialWrapper.of(() -> Materials.DarkThaumium);
    public static final MaterialWrapper ALFIUM = MaterialWrapper.of(() -> Materials.Alfium);
    public static final MaterialWrapper MUTATION = MaterialWrapper.of(() -> Materials.Mutation);
    public static final MaterialWrapper AQUAMARINE = MaterialWrapper.of(() -> Materials.Aquamarine);
    public static final MaterialWrapper ENDER = MaterialWrapper.of(() -> Materials.Ender);
    public static final MaterialWrapper SODIUMPEROXIDE = MaterialWrapper.of(() -> Materials.SodiumPeroxide);
    public static final MaterialWrapper IRIDIUMSODIUMOXIDE = MaterialWrapper.of(() -> Materials.IridiumSodiumOxide);
    public static final MaterialWrapper PLATINUMGROUPSLUDGE = MaterialWrapper.of(() -> Materials.PlatinumGroupSludge);
    public static final MaterialWrapper DRACONIUM = MaterialWrapper.of(() -> Materials.Draconium);
    public static final MaterialWrapper DRACONIUMAWAKENED = MaterialWrapper.of(() -> Materials.DraconiumAwakened);
    public static final MaterialWrapper PURPLEALLOY = MaterialWrapper.of(() -> Materials.PurpleAlloy);
    public static final MaterialWrapper INFUSEDTESLATITE = MaterialWrapper.of(() -> Materials.InfusedTeslatite);
    public static final MaterialWrapper ADAMANTIUM = MaterialWrapper.of(() -> Materials.Adamantium);
    public static final MaterialWrapper ADAMITE = MaterialWrapper.of(() -> Materials.Adamite);
    public static final MaterialWrapper ADLUORITE = MaterialWrapper.of(() -> Materials.Adluorite);
    public static final MaterialWrapper AGATE = MaterialWrapper.of(() -> Materials.Agate);
    public static final MaterialWrapper ALDUORITE = MaterialWrapper.of(() -> Materials.Alduorite);
    public static final MaterialWrapper AMBER = MaterialWrapper.of(() -> Materials.Amber);
    public static final MaterialWrapper AMMONIUM = MaterialWrapper.of(() -> Materials.Ammonium);
    public static final MaterialWrapper AMORDRINE = MaterialWrapper.of(() -> Materials.Amordrine);
    public static final MaterialWrapper ANDESITE = MaterialWrapper.of(() -> Materials.Andesite);
    public static final MaterialWrapper ANGMALLEN = MaterialWrapper.of(() -> Materials.Angmallen);
    public static final MaterialWrapper ARDITE = MaterialWrapper.of(() -> Materials.Ardite);
    public static final MaterialWrapper AREDRITE = MaterialWrapper.of(() -> Materials.Aredrite);
    public static final MaterialWrapper ATLARUS = MaterialWrapper.of(() -> Materials.Atlarus);
    public static final MaterialWrapper BITUMEN = MaterialWrapper.of(() -> Materials.Bitumen);
    public static final MaterialWrapper BLACK = MaterialWrapper.of(() -> Materials.Black);
    public static final MaterialWrapper BLIZZ = MaterialWrapper.of(() -> Materials.Blizz);
    public static final MaterialWrapper BLUESCHIST = MaterialWrapper.of(() -> Materials.Blueschist);
    public static final MaterialWrapper BLUESTONE = MaterialWrapper.of(() -> Materials.Bluestone);
    public static final MaterialWrapper BLOODSTONE = MaterialWrapper.of(() -> Materials.Bloodstone);
    public static final MaterialWrapper BLUTONIUM = MaterialWrapper.of(() -> Materials.Blutonium);
    public static final MaterialWrapper CARMOT = MaterialWrapper.of(() -> Materials.Carmot);
    public static final MaterialWrapper CELENEGIL = MaterialWrapper.of(() -> Materials.Celenegil);
    public static final MaterialWrapper CERTUSQUARTZ = MaterialWrapper.of(() -> Materials.CertusQuartz);
    public static final MaterialWrapper CERTUSQUARTZCHARGED = MaterialWrapper.of(() -> Materials.CertusQuartzCharged);
    public static final MaterialWrapper CERUCLASE = MaterialWrapper.of(() -> Materials.Ceruclase);
    public static final MaterialWrapper CITRINE = MaterialWrapper.of(() -> Materials.Citrine);
    public static final MaterialWrapper COBALTHEXAHYDRATE = MaterialWrapper.of(() -> Materials.CobaltHexahydrate);
    public static final MaterialWrapper CONSTRUCTIONFOAM = MaterialWrapper.of(() -> Materials.ConstructionFoam);
    public static final MaterialWrapper CHERT = MaterialWrapper.of(() -> Materials.Chert);
    public static final MaterialWrapper CHIMERITE = MaterialWrapper.of(() -> Materials.Chimerite);
    public static final MaterialWrapper CORAL = MaterialWrapper.of(() -> Materials.Coral);
    public static final MaterialWrapper CRUDEOIL = MaterialWrapper.of(() -> Materials.CrudeOil);
    public static final MaterialWrapper CHRYSOCOLLA = MaterialWrapper.of(() -> Materials.Chrysocolla);
    public static final MaterialWrapper CRYSTALFLUX = MaterialWrapper.of(() -> Materials.CrystalFlux);
    public static final MaterialWrapper CYANITE = MaterialWrapper.of(() -> Materials.Cyanite);
    public static final MaterialWrapper DACITE = MaterialWrapper.of(() -> Materials.Dacite);
    public static final MaterialWrapper DARKIRON = MaterialWrapper.of(() -> Materials.DarkIron);
    public static final MaterialWrapper DARKSTONE = MaterialWrapper.of(() -> Materials.DarkStone);
    public static final MaterialWrapper DEMONITE = MaterialWrapper.of(() -> Materials.Demonite);
    public static final MaterialWrapper DESH = MaterialWrapper.of(() -> Materials.Desh);
    public static final MaterialWrapper DESICHALKOS = MaterialWrapper.of(() -> Materials.Desichalkos);
    public static final MaterialWrapper DILITHIUM = MaterialWrapper.of(() -> Materials.Dilithium);
    public static final MaterialWrapper DRACONIC = MaterialWrapper.of(() -> Materials.Draconic);
    public static final MaterialWrapper DRULLOY = MaterialWrapper.of(() -> Materials.Drulloy);
    public static final MaterialWrapper DURANIUM = MaterialWrapper.of(() -> Materials.Duranium);
    public static final MaterialWrapper ECLOGITE = MaterialWrapper.of(() -> Materials.Eclogite);
    public static final MaterialWrapper ELECTRUMFLUX = MaterialWrapper.of(() -> Materials.ElectrumFlux);
    public static final MaterialWrapper EMERY = MaterialWrapper.of(() -> Materials.Emery);
    public static final MaterialWrapper ENDERIUMBASE = MaterialWrapper.of(() -> Materials.EnderiumBase);
    public static final MaterialWrapper ENERGIZED = MaterialWrapper.of(() -> Materials.Energized);
    public static final MaterialWrapper EPIDOTE = MaterialWrapper.of(() -> Materials.Epidote);
    public static final MaterialWrapper EXIMITE = MaterialWrapper.of(() -> Materials.Eximite);
    public static final MaterialWrapper FIERYSTEEL = MaterialWrapper.of(() -> Materials.FierySteel);
    public static final MaterialWrapper FIRESTONE = MaterialWrapper.of(() -> Materials.Firestone);
    public static final MaterialWrapper FLUORITE = MaterialWrapper.of(() -> Materials.Fluorite);
    public static final MaterialWrapper FOOLSRUBY = MaterialWrapper.of(() -> Materials.FoolsRuby);
    public static final MaterialWrapper FORCE = MaterialWrapper.of(() -> Materials.Force);
    public static final MaterialWrapper FORCICIUM = MaterialWrapper.of(() -> Materials.Forcicium);
    public static final MaterialWrapper FORCILLIUM = MaterialWrapper.of(() -> Materials.Forcillium);
    public static final MaterialWrapper GABBRO = MaterialWrapper.of(() -> Materials.Gabbro);
    public static final MaterialWrapper GLOWSTONE = MaterialWrapper.of(() -> Materials.Glowstone);
    public static final MaterialWrapper GNEISS = MaterialWrapper.of(() -> Materials.Gneiss);
    public static final MaterialWrapper GRAPHITE = MaterialWrapper.of(() -> Materials.Graphite);
    public static final MaterialWrapper GRAPHENE = MaterialWrapper.of(() -> Materials.Graphene);
    public static final MaterialWrapper GREENSCHIST = MaterialWrapper.of(() -> Materials.Greenschist);
    public static final MaterialWrapper GREENSTONE = MaterialWrapper.of(() -> Materials.Greenstone);
    public static final MaterialWrapper GREYWACKE = MaterialWrapper.of(() -> Materials.Greywacke);
    public static final MaterialWrapper HADEROTH = MaterialWrapper.of(() -> Materials.Haderoth);
    public static final MaterialWrapper HEMATITE = MaterialWrapper.of(() -> Materials.Hematite);
    public static final MaterialWrapper HEPATIZON = MaterialWrapper.of(() -> Materials.Hepatizon);
    public static final MaterialWrapper HSLA = MaterialWrapper.of(() -> Materials.HSLA);
    public static final MaterialWrapper IGNATIUS = MaterialWrapper.of(() -> Materials.Ignatius);
    public static final MaterialWrapper INFERNAL = MaterialWrapper.of(() -> Materials.Infernal);
    public static final MaterialWrapper INFUSCOLIUM = MaterialWrapper.of(() -> Materials.Infuscolium);
    public static final MaterialWrapper INFUSEDGOLD = MaterialWrapper.of(() -> Materials.InfusedGold);
    public static final MaterialWrapper INFUSEDAIR = MaterialWrapper.of(() -> Materials.InfusedAir);
    public static final MaterialWrapper INFUSEDFIRE = MaterialWrapper.of(() -> Materials.InfusedFire);
    public static final MaterialWrapper INFUSEDEARTH = MaterialWrapper.of(() -> Materials.InfusedEarth);
    public static final MaterialWrapper INFUSEDWATER = MaterialWrapper.of(() -> Materials.InfusedWater);
    public static final MaterialWrapper INFUSEDENTROPY = MaterialWrapper.of(() -> Materials.InfusedEntropy);
    public static final MaterialWrapper INFUSEDORDER = MaterialWrapper.of(() -> Materials.InfusedOrder);
    public static final MaterialWrapper INFUSEDVIS = MaterialWrapper.of(() -> Materials.InfusedVis);
    public static final MaterialWrapper INFUSEDDULL = MaterialWrapper.of(() -> Materials.InfusedDull);
    public static final MaterialWrapper INOLASHITE = MaterialWrapper.of(() -> Materials.Inolashite);
    public static final MaterialWrapper INVISIUM = MaterialWrapper.of(() -> Materials.Invisium);
    public static final MaterialWrapper JADE = MaterialWrapper.of(() -> Materials.Jade);
    public static final MaterialWrapper KALENDRITE = MaterialWrapper.of(() -> Materials.Kalendrite);
    public static final MaterialWrapper KOMATIITE = MaterialWrapper.of(() -> Materials.Komatiite);
    public static final MaterialWrapper LAVA = MaterialWrapper.of(() -> Materials.Lava);
    public static final MaterialWrapper LEMURITE = MaterialWrapper.of(() -> Materials.Lemurite);
    public static final MaterialWrapper LIMESTONE = MaterialWrapper.of(() -> Materials.Limestone);
    public static final MaterialWrapper MAGMA = MaterialWrapper.of(() -> Materials.Magma);
    public static final MaterialWrapper MAWSITSIT = MaterialWrapper.of(() -> Materials.Mawsitsit);
    public static final MaterialWrapper MERCASSIUM = MaterialWrapper.of(() -> Materials.Mercassium);
    public static final MaterialWrapper METEORICIRON = MaterialWrapper.of(() -> Materials.MeteoricIron);
    public static final MaterialWrapper METEORICSTEEL = MaterialWrapper.of(() -> Materials.MeteoricSteel);
    public static final MaterialWrapper METEORITE = MaterialWrapper.of(() -> Materials.Meteorite);
    public static final MaterialWrapper MEUTOITE = MaterialWrapper.of(() -> Materials.Meutoite);
    public static final MaterialWrapper MIGMATITE = MaterialWrapper.of(() -> Materials.Migmatite);
    public static final MaterialWrapper MIMICHITE = MaterialWrapper.of(() -> Materials.Mimichite);
    public static final MaterialWrapper MOONSTONE = MaterialWrapper.of(() -> Materials.Moonstone);
    public static final MaterialWrapper NAQUADAH = MaterialWrapper.of(() -> Materials.Naquadah);
    public static final MaterialWrapper NAQUADAHALLOY = MaterialWrapper.of(() -> Materials.NaquadahAlloy);
    public static final MaterialWrapper NAQUADAHENRICHED = MaterialWrapper.of(() -> Materials.NaquadahEnriched);
    public static final MaterialWrapper NAQUADRIA = MaterialWrapper.of(() -> Materials.Naquadria);
    public static final MaterialWrapper NETHER = MaterialWrapper.of(() -> Materials.Nether);
    public static final MaterialWrapper NETHERBRICK = MaterialWrapper.of(() -> Materials.NetherBrick);
    public static final MaterialWrapper NETHERQUARTZ = MaterialWrapper.of(() -> Materials.NetherQuartz);
    public static final MaterialWrapper NETHERSTAR = MaterialWrapper.of(() -> Materials.NetherStar);
    public static final MaterialWrapper OBSIDIANFLUX = MaterialWrapper.of(() -> Materials.ObsidianFlux);
    public static final MaterialWrapper OILSANDS = MaterialWrapper.of(() -> Materials.Oilsands);
    public static final MaterialWrapper ONYX = MaterialWrapper.of(() -> Materials.Onyx);
    public static final MaterialWrapper ORICHALCUM = MaterialWrapper.of(() -> Materials.Orichalcum);
    public static final MaterialWrapper OSMONIUM = MaterialWrapper.of(() -> Materials.Osmonium);
    public static final MaterialWrapper OURECLASE = MaterialWrapper.of(() -> Materials.Oureclase);
    public static final MaterialWrapper PAINITE = MaterialWrapper.of(() -> Materials.Painite);
    public static final MaterialWrapper PEANUTWOOD = MaterialWrapper.of(() -> Materials.Peanutwood);
    public static final MaterialWrapper PETROLEUM = MaterialWrapper.of(() -> Materials.Petroleum);
    public static final MaterialWrapper PEWTER = MaterialWrapper.of(() -> Materials.Pewter);
    public static final MaterialWrapper PHOENIXITE = MaterialWrapper.of(() -> Materials.Phoenixite);
    public static final MaterialWrapper PROMETHEUM = MaterialWrapper.of(() -> Materials.Prometheum);
    public static final MaterialWrapper QUARTZITE = MaterialWrapper.of(() -> Materials.Quartzite);
    public static final MaterialWrapper RANDOMITE = MaterialWrapper.of(() -> Materials.Randomite);
    public static final MaterialWrapper RHYOLITE = MaterialWrapper.of(() -> Materials.Rhyolite);
    public static final MaterialWrapper RUBRACIUM = MaterialWrapper.of(() -> Materials.Rubracium);
    public static final MaterialWrapper SAND = MaterialWrapper.of(() -> Materials.Sand);
    public static final MaterialWrapper SANGUINITE = MaterialWrapper.of(() -> Materials.Sanguinite);
    public static final MaterialWrapper SILTSTONE = MaterialWrapper.of(() -> Materials.Siltstone);
    public static final MaterialWrapper SUNSTONE = MaterialWrapper.of(() -> Materials.Sunstone);
    public static final MaterialWrapper TAR = MaterialWrapper.of(() -> Materials.Tar);
    public static final MaterialWrapper TARTARITE = MaterialWrapper.of(() -> Materials.Tartarite);
    public static final MaterialWrapper UUAMPLIFIER = MaterialWrapper.of(() -> Materials.UUAmplifier);
    public static final MaterialWrapper UUMATTER = MaterialWrapper.of(() -> Materials.UUMatter);
    public static final MaterialWrapper VOID = MaterialWrapper.of(() -> Materials.Void);
    public static final MaterialWrapper VOIDSTONE = MaterialWrapper.of(() -> Materials.Voidstone);
    public static final MaterialWrapper VULCANITE = MaterialWrapper.of(() -> Materials.Vulcanite);
    public static final MaterialWrapper VYROXERES = MaterialWrapper.of(() -> Materials.Vyroxeres);
    public static final MaterialWrapper YELLORIUM = MaterialWrapper.of(() -> Materials.Yellorium);
    public static final MaterialWrapper ZECTIUM = MaterialWrapper.of(() -> Materials.Zectium);
    public static final MaterialWrapper ANTIMATTER = MaterialWrapper.of(() -> Materials.Antimatter);
    public static final MaterialWrapper PROTOMATTER = MaterialWrapper.of(() -> Materials.Protomatter);
    public static final MaterialWrapper ADVANCEDGLUE = MaterialWrapper.of(() -> Materials.AdvancedGlue);
    public static final MaterialWrapper BIOFUEL = MaterialWrapper.of(() -> Materials.BioFuel);
    public static final MaterialWrapper BIOMASS = MaterialWrapper.of(() -> Materials.Biomass);
    public static final MaterialWrapper CHARCOALBYPRODUCTS = MaterialWrapper.of(() -> Materials.CharcoalByproducts);
    public static final MaterialWrapper CHEESE = MaterialWrapper.of(() -> Materials.Cheese);
    public static final MaterialWrapper CHILI = MaterialWrapper.of(() -> Materials.Chili);
    public static final MaterialWrapper CHOCOLATE = MaterialWrapper.of(() -> Materials.Chocolate);
    public static final MaterialWrapper CLUSTER = MaterialWrapper.of(() -> Materials.Cluster);
    public static final MaterialWrapper COALFUEL = MaterialWrapper.of(() -> Materials.CoalFuel);
    public static final MaterialWrapper COCOA = MaterialWrapper.of(() -> Materials.Cocoa);
    public static final MaterialWrapper COFFEE = MaterialWrapper.of(() -> Materials.Coffee);
    public static final MaterialWrapper CREOSOTE = MaterialWrapper.of(() -> Materials.Creosote);
    public static final MaterialWrapper ETHANOL = MaterialWrapper.of(() -> Materials.Ethanol);
    public static final MaterialWrapper FISHOIL = MaterialWrapper.of(() -> Materials.FishOil);
    public static final MaterialWrapper FERMENTEDBIOMASS = MaterialWrapper.of(() -> Materials.FermentedBiomass);
    public static final MaterialWrapper FUEL = MaterialWrapper.of(() -> Materials.Fuel);
    public static final MaterialWrapper GLUE = MaterialWrapper.of(() -> Materials.Glue);
    public static final MaterialWrapper GUNPOWDER = MaterialWrapper.of(() -> Materials.Gunpowder);
    public static final MaterialWrapper FRYINGOILHOT = MaterialWrapper.of(() -> Materials.FryingOilHot);
    public static final MaterialWrapper HONEY = MaterialWrapper.of(() -> Materials.Honey);
    public static final MaterialWrapper LEATHER = MaterialWrapper.of(() -> Materials.Leather);
    public static final MaterialWrapper LUBRICANT = MaterialWrapper.of(() -> Materials.Lubricant);
    public static final MaterialWrapper MCGUFFIUM239 = MaterialWrapper.of(() -> Materials.McGuffium239);
    public static final MaterialWrapper MEATRAW = MaterialWrapper.of(() -> Materials.MeatRaw);
    public static final MaterialWrapper MEATCOOKED = MaterialWrapper.of(() -> Materials.MeatCooked);
    public static final MaterialWrapper MILK = MaterialWrapper.of(() -> Materials.Milk);
    public static final MaterialWrapper MUD = MaterialWrapper.of(() -> Materials.Mud);
    public static final MaterialWrapper OIL = MaterialWrapper.of(() -> Materials.Oil);
    public static final MaterialWrapper PAPER = MaterialWrapper.of(() -> Materials.Paper);
    public static final MaterialWrapper PEAT = MaterialWrapper.of(() -> Materials.Peat);
    public static final MaterialWrapper RAREEARTH = MaterialWrapper.of(() -> Materials.RareEarth);
    public static final MaterialWrapper RED = MaterialWrapper.of(() -> Materials.Red);
    public static final MaterialWrapper REINFORCED = MaterialWrapper.of(() -> Materials.Reinforced);
    public static final MaterialWrapper SEEDOIL = MaterialWrapper.of(() -> Materials.SeedOil);
    public static final MaterialWrapper SEEDOILHEMP = MaterialWrapper.of(() -> Materials.SeedOilHemp);
    public static final MaterialWrapper SEEDOILLIN = MaterialWrapper.of(() -> Materials.SeedOilLin);
    public static final MaterialWrapper STONE = MaterialWrapper.of(() -> Materials.Stone);
    public static final MaterialWrapper TNT = MaterialWrapper.of(() -> Materials.TNT);
    public static final MaterialWrapper UNSTABLE = MaterialWrapper.of(() -> Materials.Unstable);
    public static final MaterialWrapper UNSTABLEINGOT = MaterialWrapper.of(() -> Materials.Unstableingot);
    public static final MaterialWrapper VINEGAR = MaterialWrapper.of(() -> Materials.Vinegar);
    public static final MaterialWrapper WHEAT = MaterialWrapper.of(() -> Materials.Wheat);
    public static final MaterialWrapper WOODGAS = MaterialWrapper.of(() -> Materials.WoodGas);
    public static final MaterialWrapper WOODTAR = MaterialWrapper.of(() -> Materials.WoodTar);
    public static final MaterialWrapper WOODVINEGAR = MaterialWrapper.of(() -> Materials.WoodVinegar);
    public static final MaterialWrapper WEEDEX9000 = MaterialWrapper.of(() -> Materials.WeedEX9000);
    public static final MaterialWrapper ALUMINIUMBRASS = MaterialWrapper.of(() -> Materials.AluminiumBrass);
    public static final MaterialWrapper OSMIRIDIUM = MaterialWrapper.of(() -> Materials.Osmiridium);
    public static final MaterialWrapper SUNNARIUM = MaterialWrapper.of(() -> Materials.Sunnarium);
    public static final MaterialWrapper ENDSTONE = MaterialWrapper.of(() -> Materials.Endstone);
    public static final MaterialWrapper NETHERRACK = MaterialWrapper.of(() -> Materials.Netherrack);
    public static final MaterialWrapper SOULSAND = MaterialWrapper.of(() -> Materials.SoulSand);
    public static final MaterialWrapper METHANE = MaterialWrapper.of(() -> Materials.Methane);
    public static final MaterialWrapper CARBONDIOXIDE = MaterialWrapper.of(() -> Materials.CarbonDioxide);
    public static final MaterialWrapper NOBLEGASES = MaterialWrapper.of(() -> Materials.NobleGases);
    public static final MaterialWrapper AIR = MaterialWrapper.of(() -> Materials.Air);
    public static final MaterialWrapper LIQUIDAIR = MaterialWrapper.of(() -> Materials.LiquidAir);
    public static final MaterialWrapper LIQUIDNITROGEN = MaterialWrapper.of(() -> Materials.LiquidNitrogen);
    public static final MaterialWrapper LIQUIDOXYGEN = MaterialWrapper.of(() -> Materials.LiquidOxygen);
    public static final MaterialWrapper SILICONDIOXIDE = MaterialWrapper.of(() -> Materials.SiliconDioxide);
    public static final MaterialWrapper JASPER = MaterialWrapper.of(() -> Materials.Jasper);
    public static final MaterialWrapper ALMANDINE = MaterialWrapper.of(() -> Materials.Almandine);
    public static final MaterialWrapper ANDRADITE = MaterialWrapper.of(() -> Materials.Andradite);
    public static final MaterialWrapper ANNEALEDCOPPER = MaterialWrapper.of(() -> Materials.AnnealedCopper);
    public static final MaterialWrapper ASBESTOS = MaterialWrapper.of(() -> Materials.Asbestos);
    public static final MaterialWrapper ASH = MaterialWrapper.of(() -> Materials.Ash);
    public static final MaterialWrapper BANDEDIRON = MaterialWrapper.of(() -> Materials.BandedIron);
    public static final MaterialWrapper BATTERYALLOY = MaterialWrapper.of(() -> Materials.BatteryAlloy);
    public static final MaterialWrapper BLUETOPAZ = MaterialWrapper.of(() -> Materials.BlueTopaz);
    public static final MaterialWrapper BONE = MaterialWrapper.of(() -> Materials.Bone);
    public static final MaterialWrapper BRASS = MaterialWrapper.of(() -> Materials.Brass);
    public static final MaterialWrapper BRONZE = MaterialWrapper.of(() -> Materials.Bronze);
    public static final MaterialWrapper BROWNLIMONITE = MaterialWrapper.of(() -> Materials.BrownLimonite);
    public static final MaterialWrapper CALCITE = MaterialWrapper.of(() -> Materials.Calcite);
    public static final MaterialWrapper CASSITERITE = MaterialWrapper.of(() -> Materials.Cassiterite);
    public static final MaterialWrapper CASSITERITESAND = MaterialWrapper.of(() -> Materials.CassiteriteSand);
    public static final MaterialWrapper CHALCOPYRITE = MaterialWrapper.of(() -> Materials.Chalcopyrite);
    public static final MaterialWrapper CHARCOAL = MaterialWrapper.of(() -> Materials.Charcoal);
    public static final MaterialWrapper CHROMITE = MaterialWrapper.of(() -> Materials.Chromite);
    public static final MaterialWrapper CHROMIUMDIOXIDE = MaterialWrapper.of(() -> Materials.ChromiumDioxide);
    public static final MaterialWrapper CINNABAR = MaterialWrapper.of(() -> Materials.Cinnabar);
    public static final MaterialWrapper WATER = MaterialWrapper.of(() -> Materials.Water);
    public static final MaterialWrapper CLAY = MaterialWrapper.of(() -> Materials.Clay);
    public static final MaterialWrapper COAL = MaterialWrapper.of(() -> Materials.Coal);
    public static final MaterialWrapper COBALTITE = MaterialWrapper.of(() -> Materials.Cobaltite);
    public static final MaterialWrapper COOPERITE = MaterialWrapper.of(() -> Materials.Cooperite);
    public static final MaterialWrapper CUPRONICKEL = MaterialWrapper.of(() -> Materials.Cupronickel);
    public static final MaterialWrapper DARKASH = MaterialWrapper.of(() -> Materials.DarkAsh);
    public static final MaterialWrapper DEEPIRON = MaterialWrapper.of(() -> Materials.DeepIron);
    public static final MaterialWrapper DIAMOND = MaterialWrapper.of(() -> Materials.Diamond);
    public static final MaterialWrapper ELECTRUM = MaterialWrapper.of(() -> Materials.Electrum);
    public static final MaterialWrapper EMERALD = MaterialWrapper.of(() -> Materials.Emerald);
    public static final MaterialWrapper FRESHWATER = MaterialWrapper.of(() -> Materials.FreshWater);
    public static final MaterialWrapper GALENA = MaterialWrapper.of(() -> Materials.Galena);
    public static final MaterialWrapper GARNIERITE = MaterialWrapper.of(() -> Materials.Garnierite);
    public static final MaterialWrapper GLYCERYL = MaterialWrapper.of(() -> Materials.Glyceryl);
    public static final MaterialWrapper GREENSAPPHIRE = MaterialWrapper.of(() -> Materials.GreenSapphire);
    public static final MaterialWrapper GROSSULAR = MaterialWrapper.of(() -> Materials.Grossular);
    public static final MaterialWrapper HOLYWATER = MaterialWrapper.of(() -> Materials.HolyWater);
    public static final MaterialWrapper ICE = MaterialWrapper.of(() -> Materials.Ice);
    public static final MaterialWrapper ILMENITE = MaterialWrapper.of(() -> Materials.Ilmenite);
    public static final MaterialWrapper RUTILE = MaterialWrapper.of(() -> Materials.Rutile);
    public static final MaterialWrapper BAUXITE = MaterialWrapper.of(() -> Materials.Bauxite);
    public static final MaterialWrapper TITANIUMTETRACHLORIDE = MaterialWrapper.of(() -> Materials.Titaniumtetrachloride);
    public static final MaterialWrapper MAGNESIUMCHLORIDE = MaterialWrapper.of(() -> Materials.Magnesiumchloride);
    public static final MaterialWrapper INVAR = MaterialWrapper.of(() -> Materials.Invar);
    public static final MaterialWrapper KANTHAL = MaterialWrapper.of(() -> Materials.Kanthal);
    public static final MaterialWrapper LAZURITE = MaterialWrapper.of(() -> Materials.Lazurite);
    public static final MaterialWrapper MAGNALIUM = MaterialWrapper.of(() -> Materials.Magnalium);
    public static final MaterialWrapper MAGNESITE = MaterialWrapper.of(() -> Materials.Magnesite);
    public static final MaterialWrapper MAGNETITE = MaterialWrapper.of(() -> Materials.Magnetite);
    public static final MaterialWrapper MOLYBDENITE = MaterialWrapper.of(() -> Materials.Molybdenite);
    public static final MaterialWrapper NICHROME = MaterialWrapper.of(() -> Materials.Nichrome);
    public static final MaterialWrapper NIOBIUMNITRIDE = MaterialWrapper.of(() -> Materials.NiobiumNitride);
    public static final MaterialWrapper NIOBIUMTITANIUM = MaterialWrapper.of(() -> Materials.NiobiumTitanium);
    public static final MaterialWrapper NITROCARBON = MaterialWrapper.of(() -> Materials.NitroCarbon);
    public static final MaterialWrapper NITROGENDIOXIDE = MaterialWrapper.of(() -> Materials.NitrogenDioxide);
    public static final MaterialWrapper OBSIDIAN = MaterialWrapper.of(() -> Materials.Obsidian);
    public static final MaterialWrapper PHOSPHATE = MaterialWrapper.of(() -> Materials.Phosphate);
    public static final MaterialWrapper PIGIRON = MaterialWrapper.of(() -> Materials.PigIron);
    public static final MaterialWrapper PLASTIC = MaterialWrapper.of(() -> Materials.Plastic);
    public static final MaterialWrapper EPOXID = MaterialWrapper.of(() -> Materials.Epoxid);
    public static final MaterialWrapper POLYDIMETHYLSILOXANE = MaterialWrapper.of(() -> Materials.Polydimethylsiloxane);
    public static final MaterialWrapper SILICONE = MaterialWrapper.of(() -> Materials.Silicone);
    public static final MaterialWrapper POLYCAPROLACTAM = MaterialWrapper.of(() -> Materials.Polycaprolactam);
    public static final MaterialWrapper POLYTETRAFLUOROETHYLENE = MaterialWrapper.of(() -> Materials.Polytetrafluoroethylene);
    public static final MaterialWrapper POWELLITE = MaterialWrapper.of(() -> Materials.Powellite);
    public static final MaterialWrapper PUMICE = MaterialWrapper.of(() -> Materials.Pumice);
    public static final MaterialWrapper PYRITE = MaterialWrapper.of(() -> Materials.Pyrite);
    public static final MaterialWrapper PYROLUSITE = MaterialWrapper.of(() -> Materials.Pyrolusite);
    public static final MaterialWrapper PYROPE = MaterialWrapper.of(() -> Materials.Pyrope);
    public static final MaterialWrapper ROCKSALT = MaterialWrapper.of(() -> Materials.RockSalt);
    public static final MaterialWrapper RUBBER = MaterialWrapper.of(() -> Materials.Rubber);
    public static final MaterialWrapper RAWRUBBER = MaterialWrapper.of(() -> Materials.RawRubber);
    public static final MaterialWrapper RUBY = MaterialWrapper.of(() -> Materials.Ruby);
    public static final MaterialWrapper SALT = MaterialWrapper.of(() -> Materials.Salt);
    public static final MaterialWrapper SALTPETER = MaterialWrapper.of(() -> Materials.Saltpeter);
    public static final MaterialWrapper SAPPHIRE = MaterialWrapper.of(() -> Materials.Sapphire);
    public static final MaterialWrapper SCHEELITE = MaterialWrapper.of(() -> Materials.Scheelite);
    public static final MaterialWrapper SNOW = MaterialWrapper.of(() -> Materials.Snow);
    public static final MaterialWrapper SODALITE = MaterialWrapper.of(() -> Materials.Sodalite);
    public static final MaterialWrapper SODIUMPERSULFATE = MaterialWrapper.of(() -> Materials.SodiumPersulfate);
    public static final MaterialWrapper SODIUMSULFIDE = MaterialWrapper.of(() -> Materials.SodiumSulfide);
    public static final MaterialWrapper HYDRICSULFIDE = MaterialWrapper.of(() -> Materials.HydricSulfide);
    public static final MaterialWrapper OILEXTRAHEAVY = MaterialWrapper.of(() -> Materials.OilExtraHeavy);
    public static final MaterialWrapper OILHEAVY = MaterialWrapper.of(() -> Materials.OilHeavy);
    public static final MaterialWrapper OILMEDIUM = MaterialWrapper.of(() -> Materials.OilMedium);
    public static final MaterialWrapper OILLIGHT = MaterialWrapper.of(() -> Materials.OilLight);
    public static final MaterialWrapper NATRURALGAS = MaterialWrapper.of(() -> Materials.NatruralGas);
    public static final MaterialWrapper SULFURICGAS = MaterialWrapper.of(() -> Materials.SulfuricGas);
    public static final MaterialWrapper GAS = MaterialWrapper.of(() -> Materials.Gas);
    public static final MaterialWrapper SULFURICNAPHTHA = MaterialWrapper.of(() -> Materials.SulfuricNaphtha);
    public static final MaterialWrapper SULFURICLIGHTFUEL = MaterialWrapper.of(() -> Materials.SulfuricLightFuel);
    public static final MaterialWrapper SULFURICHEAVYFUEL = MaterialWrapper.of(() -> Materials.SulfuricHeavyFuel);
    public static final MaterialWrapper NAPHTHA = MaterialWrapper.of(() -> Materials.Naphtha);
    public static final MaterialWrapper LIGHTFUEL = MaterialWrapper.of(() -> Materials.LightFuel);
    public static final MaterialWrapper HEAVYFUEL = MaterialWrapper.of(() -> Materials.HeavyFuel);
    public static final MaterialWrapper LPG = MaterialWrapper.of(() -> Materials.LPG);
    public static final MaterialWrapper REINFORCEGLASS = MaterialWrapper.of(() -> Materials.ReinforceGlass);
    public static final MaterialWrapper BIOMEDIUMRAW = MaterialWrapper.of(() -> Materials.BioMediumRaw);
    public static final MaterialWrapper BIOMEDIUMSTERILIZED = MaterialWrapper.of(() -> Materials.BioMediumSterilized);
    public static final MaterialWrapper CHLOROBENZENE = MaterialWrapper.of(() -> Materials.Chlorobenzene);
    public static final MaterialWrapper DILUTEDHYDROCHLORICACID = MaterialWrapper.of(() -> Materials.DilutedHydrochloricAcid);
    public static final MaterialWrapper PYROCHLORE = MaterialWrapper.of(() -> Materials.Pyrochlore);
    public static final MaterialWrapper GROWTHMEDIUMRAW = MaterialWrapper.of(() -> Materials.GrowthMediumRaw);
    public static final MaterialWrapper GROWTHMEDIUMSTERILIZED = MaterialWrapper.of(() -> Materials.GrowthMediumSterilized);
    public static final MaterialWrapper FERRITEMIXTURE = MaterialWrapper.of(() -> Materials.FerriteMixture);
    public static final MaterialWrapper NICKELZINCFERRITE = MaterialWrapper.of(() -> Materials.NickelZincFerrite);
    public static final MaterialWrapper MASSICOT = MaterialWrapper.of(() -> Materials.Massicot);
    public static final MaterialWrapper ARSENICTRIOXIDE = MaterialWrapper.of(() -> Materials.ArsenicTrioxide);
    public static final MaterialWrapper COBALTOXIDE = MaterialWrapper.of(() -> Materials.CobaltOxide);
    public static final MaterialWrapper ZINCITE = MaterialWrapper.of(() -> Materials.Zincite);
    public static final MaterialWrapper ANTIMONYTRIOXIDE = MaterialWrapper.of(() -> Materials.AntimonyTrioxide);
    public static final MaterialWrapper CUPRICOXIDE = MaterialWrapper.of(() -> Materials.CupricOxide);
    public static final MaterialWrapper FERROSILITE = MaterialWrapper.of(() -> Materials.Ferrosilite);
    public static final MaterialWrapper MAGNESIA = MaterialWrapper.of(() -> Materials.Magnesia);
    public static final MaterialWrapper QUICKLIME = MaterialWrapper.of(() -> Materials.Quicklime);
    public static final MaterialWrapper POTASH = MaterialWrapper.of(() -> Materials.Potash);
    public static final MaterialWrapper SODAASH = MaterialWrapper.of(() -> Materials.SodaAsh);
    public static final MaterialWrapper BIODIESEL = MaterialWrapper.of(() -> Materials.BioDiesel);
    public static final MaterialWrapper NITRATIONMIXTURE = MaterialWrapper.of(() -> Materials.NitrationMixture);
    public static final MaterialWrapper GLYCEROL = MaterialWrapper.of(() -> Materials.Glycerol);
    public static final MaterialWrapper SODIUMBISULFATE = MaterialWrapper.of(() -> Materials.SodiumBisulfate);
    public static final MaterialWrapper POLYPHENYLENESULFIDE = MaterialWrapper.of(() -> Materials.PolyphenyleneSulfide);
    public static final MaterialWrapper DICHLOROBENZENE = MaterialWrapper.of(() -> Materials.Dichlorobenzene);
    public static final MaterialWrapper POLYSTYRENE = MaterialWrapper.of(() -> Materials.Polystyrene);
    public static final MaterialWrapper STYRENE = MaterialWrapper.of(() -> Materials.Styrene);
    public static final MaterialWrapper ISOPRENE = MaterialWrapper.of(() -> Materials.Isoprene);
    public static final MaterialWrapper TETRANITROMETHANE = MaterialWrapper.of(() -> Materials.Tetranitromethane);
    public static final MaterialWrapper ETHENONE = MaterialWrapper.of(() -> Materials.Ethenone);
    public static final MaterialWrapper ETHANE = MaterialWrapper.of(() -> Materials.Ethane);
    public static final MaterialWrapper PROPANE = MaterialWrapper.of(() -> Materials.Propane);
    public static final MaterialWrapper BUTANE = MaterialWrapper.of(() -> Materials.Butane);
    public static final MaterialWrapper BUTENE = MaterialWrapper.of(() -> Materials.Butene);
    public static final MaterialWrapper BUTADIENE = MaterialWrapper.of(() -> Materials.Butadiene);
    public static final MaterialWrapper RAWSTYRENEBUTADIENERUBBER = MaterialWrapper.of(() -> Materials.RawStyreneButadieneRubber);
    public static final MaterialWrapper STYRENEBUTADIENERUBBER = MaterialWrapper.of(() -> Materials.StyreneButadieneRubber);
    public static final MaterialWrapper TOLUENE = MaterialWrapper.of(() -> Materials.Toluene);
    public static final MaterialWrapper EPICHLOROHYDRIN = MaterialWrapper.of(() -> Materials.Epichlorohydrin);
    public static final MaterialWrapper POLYVINYLCHLORIDE = MaterialWrapper.of(() -> Materials.PolyvinylChloride);
    public static final MaterialWrapper VINYLCHLORIDE = MaterialWrapper.of(() -> Materials.VinylChloride);
    public static final MaterialWrapper SULFURDIOXIDE = MaterialWrapper.of(() -> Materials.SulfurDioxide);
    public static final MaterialWrapper SULFURTRIOXIDE = MaterialWrapper.of(() -> Materials.SulfurTrioxide);
    public static final MaterialWrapper NITRICACID = MaterialWrapper.of(() -> Materials.NitricAcid);
    public static final MaterialWrapper DIMETHYLHYDRAZINE = MaterialWrapper.of(() -> Materials.Dimethylhydrazine);
    public static final MaterialWrapper CHLORAMINE = MaterialWrapper.of(() -> Materials.Chloramine);
    public static final MaterialWrapper DIMETHYLAMINE = MaterialWrapper.of(() -> Materials.Dimethylamine);
    public static final MaterialWrapper DINITROGENTETROXIDE = MaterialWrapper.of(() -> Materials.DinitrogenTetroxide);
    public static final MaterialWrapper NITRICOXIDE = MaterialWrapper.of(() -> Materials.NitricOxide);
    public static final MaterialWrapper AMMONIA = MaterialWrapper.of(() -> Materials.Ammonia);
    public static final MaterialWrapper DIMETHYLDICHLOROSILANE = MaterialWrapper.of(() -> Materials.Dimethyldichlorosilane);
    public static final MaterialWrapper CHLOROMETHANE = MaterialWrapper.of(() -> Materials.Chloromethane);
    public static final MaterialWrapper PHOSPHOROUSPENTOXIDE = MaterialWrapper.of(() -> Materials.PhosphorousPentoxide);
    public static final MaterialWrapper TETRAFLUOROETHYLENE = MaterialWrapper.of(() -> Materials.Tetrafluoroethylene);
    public static final MaterialWrapper HYDROFLUORICACID = MaterialWrapper.of(() -> Materials.HydrofluoricAcid);
    public static final MaterialWrapper CHLOROFORM = MaterialWrapper.of(() -> Materials.Chloroform);
    public static final MaterialWrapper BISPHENOLA = MaterialWrapper.of(() -> Materials.BisphenolA);
    public static final MaterialWrapper ACETICACID = MaterialWrapper.of(() -> Materials.AceticAcid);
    public static final MaterialWrapper CALCIUMACETATESOLUTION = MaterialWrapper.of(() -> Materials.CalciumAcetateSolution);
    public static final MaterialWrapper ACETONE = MaterialWrapper.of(() -> Materials.Acetone);
    public static final MaterialWrapper METHANOL = MaterialWrapper.of(() -> Materials.Methanol);
    public static final MaterialWrapper CARBONMONOXIDE = MaterialWrapper.of(() -> Materials.CarbonMonoxide);
    public static final MaterialWrapper METALMIXTURE = MaterialWrapper.of(() -> Materials.MetalMixture);
    public static final MaterialWrapper ETHYLENE = MaterialWrapper.of(() -> Materials.Ethylene);
    public static final MaterialWrapper PROPENE = MaterialWrapper.of(() -> Materials.Propene);
    public static final MaterialWrapper VINYLACETATE = MaterialWrapper.of(() -> Materials.VinylAcetate);
    public static final MaterialWrapper POLYVINYLACETATE = MaterialWrapper.of(() -> Materials.PolyvinylAcetate);
    public static final MaterialWrapper METHYLACETATE = MaterialWrapper.of(() -> Materials.MethylAcetate);
    public static final MaterialWrapper ALLYLCHLORIDE = MaterialWrapper.of(() -> Materials.AllylChloride);
    public static final MaterialWrapper HYDROCHLORICACID = MaterialWrapper.of(() -> Materials.HydrochloricAcid);
    public static final MaterialWrapper HYPOCHLOROUSACID = MaterialWrapper.of(() -> Materials.HypochlorousAcid);
    public static final MaterialWrapper SODIUMOXIDE = MaterialWrapper.of(() -> Materials.SodiumOxide);
    public static final MaterialWrapper SODIUMHYDROXIDE = MaterialWrapper.of(() -> Materials.SodiumHydroxide);
    public static final MaterialWrapper BENZENE = MaterialWrapper.of(() -> Materials.Benzene);
    public static final MaterialWrapper PHENOL = MaterialWrapper.of(() -> Materials.Phenol);
    public static final MaterialWrapper CUMENE = MaterialWrapper.of(() -> Materials.Cumene);
    public static final MaterialWrapper PHOSPHORICACID = MaterialWrapper.of(() -> Materials.PhosphoricAcid);
    public static final MaterialWrapper SALTWATER = MaterialWrapper.of(() -> Materials.SaltWater);
    public static final MaterialWrapper IRONIIICHLORIDE = MaterialWrapper.of(() -> Materials.IronIIIChloride);
    public static final MaterialWrapper LIFEESSENCE = MaterialWrapper.of(() -> Materials.LifeEssence);
    public static final MaterialWrapper ROASTEDCOPPER = MaterialWrapper.of(() -> Materials.RoastedCopper);
    public static final MaterialWrapper ROASTEDANTIMONY = MaterialWrapper.of(() -> Materials.RoastedAntimony);
    public static final MaterialWrapper ROASTEDIRON = MaterialWrapper.of(() -> Materials.RoastedIron);
    public static final MaterialWrapper ROASTEDNICKEL = MaterialWrapper.of(() -> Materials.RoastedNickel);
    public static final MaterialWrapper ROASTEDZINC = MaterialWrapper.of(() -> Materials.RoastedZinc);
    public static final MaterialWrapper ROASTEDCOBALT = MaterialWrapper.of(() -> Materials.RoastedCobalt);
    public static final MaterialWrapper ROASTEDARSENIC = MaterialWrapper.of(() -> Materials.RoastedArsenic);
    public static final MaterialWrapper ROASTEDLEAD = MaterialWrapper.of(() -> Materials.RoastedLead);
    public static final MaterialWrapper SILICONSG = MaterialWrapper.of(() -> Materials.SiliconSG);
    public static final MaterialWrapper CALCIUMDISILICIDE = MaterialWrapper.of(() -> Materials.CalciumDisilicide);
    public static final MaterialWrapper SILICONTETRAFLUORIDE = MaterialWrapper.of(() -> Materials.SiliconTetrafluoride);
    public static final MaterialWrapper SILICONTETRACHLORIDE = MaterialWrapper.of(() -> Materials.SiliconTetrachloride);
    public static final MaterialWrapper TRICHLOROSILANE = MaterialWrapper.of(() -> Materials.Trichlorosilane);
    public static final MaterialWrapper HEXACHLORODISILANE = MaterialWrapper.of(() -> Materials.Hexachlorodisilane);
    public static final MaterialWrapper DICHLOROSILANE = MaterialWrapper.of(() -> Materials.Dichlorosilane);
    public static final MaterialWrapper SILANE = MaterialWrapper.of(() -> Materials.Silane);
    public static final MaterialWrapper CALCIUMHYDRIDE = MaterialWrapper.of(() -> Materials.Calciumhydride);
    public static final MaterialWrapper ALUMINIUMFLUORIDE = MaterialWrapper.of(() -> Materials.AluminiumFluoride);
    public static final MaterialWrapper SOLDERINGALLOY = MaterialWrapper.of(() -> Materials.SolderingAlloy);
    public static final MaterialWrapper GALLIUMARSENIDE = MaterialWrapper.of(() -> Materials.GalliumArsenide);
    public static final MaterialWrapper INDIUMGALLIUMPHOSPHIDE = MaterialWrapper.of(() -> Materials.IndiumGalliumPhosphide);
    public static final MaterialWrapper SPESSARTINE = MaterialWrapper.of(() -> Materials.Spessartine);
    public static final MaterialWrapper SPHALERITE = MaterialWrapper.of(() -> Materials.Sphalerite);
    public static final MaterialWrapper STAINLESSSTEEL = MaterialWrapper.of(() -> Materials.StainlessSteel);
    public static final MaterialWrapper STEEL = MaterialWrapper.of(() -> Materials.Steel);
    public static final MaterialWrapper STIBNITE = MaterialWrapper.of(() -> Materials.Stibnite);
    public static final MaterialWrapper SULFURICACID = MaterialWrapper.of(() -> Materials.SulfuricAcid);
    public static final MaterialWrapper TANZANITE = MaterialWrapper.of(() -> Materials.Tanzanite);
    public static final MaterialWrapper TETRAHEDRITE = MaterialWrapper.of(() -> Materials.Tetrahedrite);
    public static final MaterialWrapper TINALLOY = MaterialWrapper.of(() -> Materials.TinAlloy);
    public static final MaterialWrapper TOPAZ = MaterialWrapper.of(() -> Materials.Topaz);
    public static final MaterialWrapper TUNGSTATE = MaterialWrapper.of(() -> Materials.Tungstate);
    public static final MaterialWrapper ULTIMET = MaterialWrapper.of(() -> Materials.Ultimet);
    public static final MaterialWrapper URANINITE = MaterialWrapper.of(() -> Materials.Uraninite);
    public static final MaterialWrapper UVAROVITE = MaterialWrapper.of(() -> Materials.Uvarovite);
    public static final MaterialWrapper VANADIUMGALLIUM = MaterialWrapper.of(() -> Materials.VanadiumGallium);
    public static final MaterialWrapper WOOD = MaterialWrapper.of(() -> Materials.Wood);
    public static final MaterialWrapper WROUGHTIRON = MaterialWrapper.of(() -> Materials.WroughtIron);
    public static final MaterialWrapper WULFENITE = MaterialWrapper.of(() -> Materials.Wulfenite);
    public static final MaterialWrapper YELLOWLIMONITE = MaterialWrapper.of(() -> Materials.YellowLimonite);
    public static final MaterialWrapper YTTRIUMBARIUMCUPRATE = MaterialWrapper.of(() -> Materials.YttriumBariumCuprate);
    public static final MaterialWrapper WOODSEALED = MaterialWrapper.of(() -> Materials.WoodSealed);
    public static final MaterialWrapper LIVEROOT = MaterialWrapper.of(() -> Materials.LiveRoot);
    public static final MaterialWrapper IRONWOOD = MaterialWrapper.of(() -> Materials.IronWood);
    public static final MaterialWrapper GLASS = MaterialWrapper.of(() -> Materials.Glass);
    public static final MaterialWrapper BOROSILICATEGLASS = MaterialWrapper.of(() -> Materials.BorosilicateGlass);
    public static final MaterialWrapper PERLITE = MaterialWrapper.of(() -> Materials.Perlite);
    public static final MaterialWrapper BORAX = MaterialWrapper.of(() -> Materials.Borax);
    public static final MaterialWrapper LIGNITE = MaterialWrapper.of(() -> Materials.Lignite);
    public static final MaterialWrapper OLIVINE = MaterialWrapper.of(() -> Materials.Olivine);
    public static final MaterialWrapper OPAL = MaterialWrapper.of(() -> Materials.Opal);
    public static final MaterialWrapper AMETHYST = MaterialWrapper.of(() -> Materials.Amethyst);
    public static final MaterialWrapper REDSTONE = MaterialWrapper.of(() -> Materials.Redstone);
    public static final MaterialWrapper LAPIS = MaterialWrapper.of(() -> Materials.Lapis);
    public static final MaterialWrapper BLAZE = MaterialWrapper.of(() -> Materials.Blaze);
    public static final MaterialWrapper ENDERPEARL = MaterialWrapper.of(() -> Materials.EnderPearl);
    public static final MaterialWrapper ENDEREYE = MaterialWrapper.of(() -> Materials.EnderEye);
    public static final MaterialWrapper FLINT = MaterialWrapper.of(() -> Materials.Flint);
    public static final MaterialWrapper DIATOMITE = MaterialWrapper.of(() -> Materials.Diatomite);
    public static final MaterialWrapper VOLCANICASH = MaterialWrapper.of(() -> Materials.VolcanicAsh);
    public static final MaterialWrapper NITER = MaterialWrapper.of(() -> Materials.Niter);
    public static final MaterialWrapper PYROTHEUM = MaterialWrapper.of(() -> Materials.Pyrotheum);
    public static final MaterialWrapper CRYOTHEUM = MaterialWrapper.of(() -> Materials.Cryotheum);
    public static final MaterialWrapper HYDRATEDCOAL = MaterialWrapper.of(() -> Materials.HydratedCoal);
    public static final MaterialWrapper APATITE = MaterialWrapper.of(() -> Materials.Apatite);
    public static final MaterialWrapper ALUMITE = MaterialWrapper.of(() -> Materials.Alumite);
    public static final MaterialWrapper MANYULLYN = MaterialWrapper.of(() -> Materials.Manyullyn);
    public static final MaterialWrapper STEELEAF = MaterialWrapper.of(() -> Materials.Steeleaf);
    public static final MaterialWrapper KNIGHTMETAL = MaterialWrapper.of(() -> Materials.Knightmetal);
    public static final MaterialWrapper STERLINGSILVER = MaterialWrapper.of(() -> Materials.SterlingSilver);
    public static final MaterialWrapper ROSEGOLD = MaterialWrapper.of(() -> Materials.RoseGold);
    public static final MaterialWrapper BLACKBRONZE = MaterialWrapper.of(() -> Materials.BlackBronze);
    public static final MaterialWrapper BISMUTHBRONZE = MaterialWrapper.of(() -> Materials.BismuthBronze);
    public static final MaterialWrapper BLACKSTEEL = MaterialWrapper.of(() -> Materials.BlackSteel);
    public static final MaterialWrapper REDSTEEL = MaterialWrapper.of(() -> Materials.RedSteel);
    public static final MaterialWrapper BLUESTEEL = MaterialWrapper.of(() -> Materials.BlueSteel);
    public static final MaterialWrapper DAMASCUSSTEEL = MaterialWrapper.of(() -> Materials.DamascusSteel);
    public static final MaterialWrapper TUNGSTENSTEEL = MaterialWrapper.of(() -> Materials.TungstenSteel);
    public static final MaterialWrapper NITROCOALFUEL = MaterialWrapper.of(() -> Materials.NitroCoalFuel);
    public static final MaterialWrapper NITROFUEL = MaterialWrapper.of(() -> Materials.NitroFuel);
    public static final MaterialWrapper REDALLOY = MaterialWrapper.of(() -> Materials.RedAlloy);
    public static final MaterialWrapper COBALTBRASS = MaterialWrapper.of(() -> Materials.CobaltBrass);
    public static final MaterialWrapper TRICALCIUMPHOSPHATE = MaterialWrapper.of(() -> Materials.TricalciumPhosphate);
    public static final MaterialWrapper BASALT = MaterialWrapper.of(() -> Materials.Basalt);
    public static final MaterialWrapper GARNETRED = MaterialWrapper.of(() -> Materials.GarnetRed);
    public static final MaterialWrapper GARNETYELLOW = MaterialWrapper.of(() -> Materials.GarnetYellow);
    public static final MaterialWrapper MARBLE = MaterialWrapper.of(() -> Materials.Marble);
    public static final MaterialWrapper SUGAR = MaterialWrapper.of(() -> Materials.Sugar);
    public static final MaterialWrapper THAUMIUM = MaterialWrapper.of(() -> Materials.Thaumium);
    public static final MaterialWrapper VINTEUM = MaterialWrapper.of(() -> Materials.Vinteum);
    public static final MaterialWrapper VIS = MaterialWrapper.of(() -> Materials.Vis);
    public static final MaterialWrapper REDROCK = MaterialWrapper.of(() -> Materials.Redrock);
    public static final MaterialWrapper POTASSIUMFELDSPAR = MaterialWrapper.of(() -> Materials.PotassiumFeldspar);
    public static final MaterialWrapper BIOTITE = MaterialWrapper.of(() -> Materials.Biotite);
    public static final MaterialWrapper GRANITEBLACK = MaterialWrapper.of(() -> Materials.GraniteBlack);
    public static final MaterialWrapper GRANITERED = MaterialWrapper.of(() -> Materials.GraniteRed);
    public static final MaterialWrapper CHRYSOTILE = MaterialWrapper.of(() -> Materials.Chrysotile);
    public static final MaterialWrapper REALGAR = MaterialWrapper.of(() -> Materials.Realgar);
    public static final MaterialWrapper VANADIUMMAGNETITE = MaterialWrapper.of(() -> Materials.VanadiumMagnetite);
    public static final MaterialWrapper BASALTICMINERALSAND = MaterialWrapper.of(() -> Materials.BasalticMineralSand);
    public static final MaterialWrapper GRANITICMINERALSAND = MaterialWrapper.of(() -> Materials.GraniticMineralSand);
    public static final MaterialWrapper GARNETSAND = MaterialWrapper.of(() -> Materials.GarnetSand);
    public static final MaterialWrapper QUARTZSAND = MaterialWrapper.of(() -> Materials.QuartzSand);
    public static final MaterialWrapper BASTNASITE = MaterialWrapper.of(() -> Materials.Bastnasite);
    public static final MaterialWrapper PENTLANDITE = MaterialWrapper.of(() -> Materials.Pentlandite);
    public static final MaterialWrapper SPODUMENE = MaterialWrapper.of(() -> Materials.Spodumene);
    public static final MaterialWrapper POLLUCITE = MaterialWrapper.of(() -> Materials.Pollucite);
    public static final MaterialWrapper TANTALITE = MaterialWrapper.of(() -> Materials.Tantalite);
    public static final MaterialWrapper LEPIDOLITE = MaterialWrapper.of(() -> Materials.Lepidolite);
    public static final MaterialWrapper GLAUCONITE = MaterialWrapper.of(() -> Materials.Glauconite);
    public static final MaterialWrapper GLAUCONITESAND = MaterialWrapper.of(() -> Materials.GlauconiteSand);
    public static final MaterialWrapper VERMICULITE = MaterialWrapper.of(() -> Materials.Vermiculite);
    public static final MaterialWrapper BENTONITE = MaterialWrapper.of(() -> Materials.Bentonite);
    public static final MaterialWrapper FULLERSEARTH = MaterialWrapper.of(() -> Materials.FullersEarth);
    public static final MaterialWrapper PITCHBLENDE = MaterialWrapper.of(() -> Materials.Pitchblende);
    public static final MaterialWrapper MONAZITE = MaterialWrapper.of(() -> Materials.Monazite);
    public static final MaterialWrapper MALACHITE = MaterialWrapper.of(() -> Materials.Malachite);
    public static final MaterialWrapper MIRABILITE = MaterialWrapper.of(() -> Materials.Mirabilite);
    public static final MaterialWrapper MICA = MaterialWrapper.of(() -> Materials.Mica);
    public static final MaterialWrapper TRONA = MaterialWrapper.of(() -> Materials.Trona);
    public static final MaterialWrapper BARITE = MaterialWrapper.of(() -> Materials.Barite);
    public static final MaterialWrapper GYPSUM = MaterialWrapper.of(() -> Materials.Gypsum);
    public static final MaterialWrapper ALUNITE = MaterialWrapper.of(() -> Materials.Alunite);
    public static final MaterialWrapper DOLOMITE = MaterialWrapper.of(() -> Materials.Dolomite);
    public static final MaterialWrapper WOLLASTONITE = MaterialWrapper.of(() -> Materials.Wollastonite);
    public static final MaterialWrapper ZEOLITE = MaterialWrapper.of(() -> Materials.Zeolite);
    public static final MaterialWrapper KYANITE = MaterialWrapper.of(() -> Materials.Kyanite);
    public static final MaterialWrapper KAOLINITE = MaterialWrapper.of(() -> Materials.Kaolinite);
    public static final MaterialWrapper TALC = MaterialWrapper.of(() -> Materials.Talc);
    public static final MaterialWrapper SOAPSTONE = MaterialWrapper.of(() -> Materials.Soapstone);
    public static final MaterialWrapper CONCRETE = MaterialWrapper.of(() -> Materials.Concrete);
    public static final MaterialWrapper IRONMAGNETIC = MaterialWrapper.of(() -> Materials.IronMagnetic);
    public static final MaterialWrapper STEELMAGNETIC = MaterialWrapper.of(() -> Materials.SteelMagnetic);
    public static final MaterialWrapper NEODYMIUMMAGNETIC = MaterialWrapper.of(() -> Materials.NeodymiumMagnetic);
    public static final MaterialWrapper SAMARIUMMAGNETIC = MaterialWrapper.of(() -> Materials.SamariumMagnetic);
    public static final MaterialWrapper TUNGSTENCARBIDE = MaterialWrapper.of(() -> Materials.TungstenCarbide);
    public static final MaterialWrapper VANADIUMSTEEL = MaterialWrapper.of(() -> Materials.VanadiumSteel);
    public static final MaterialWrapper HSSG = MaterialWrapper.of(() -> Materials.HSSG);
    public static final MaterialWrapper HSSE = MaterialWrapper.of(() -> Materials.HSSE);
    public static final MaterialWrapper HSSS = MaterialWrapper.of(() -> Materials.HSSS);
    public static final MaterialWrapper TPV = MaterialWrapper.of(() -> Materials.TPV);
    public static final MaterialWrapper DILUTEDSULFURICACID = MaterialWrapper.of(() -> Materials.DilutedSulfuricAcid);
    public static final MaterialWrapper EPOXIDFIBERREINFORCED = MaterialWrapper.of(() -> Materials.EpoxidFiberReinforced);
    public static final MaterialWrapper SODIUMCARBONATE = MaterialWrapper.of(() -> Materials.SodiumCarbonate);
    public static final MaterialWrapper SODIUMALUMINATE = MaterialWrapper.of(() -> Materials.SodiumAluminate);
    public static final MaterialWrapper ALUMINIUMOXIDE = MaterialWrapper.of(() -> Materials.Aluminiumoxide);
    public static final MaterialWrapper ALUMINIUMHYDROXIDE = MaterialWrapper.of(() -> Materials.Aluminiumhydroxide);
    public static final MaterialWrapper CRYOLITE = MaterialWrapper.of(() -> Materials.Cryolite);
    public static final MaterialWrapper REDMUD = MaterialWrapper.of(() -> Materials.RedMud);
    public static final MaterialWrapper BRICK = MaterialWrapper.of(() -> Materials.Brick);
    public static final MaterialWrapper FIRECLAY = MaterialWrapper.of(() -> Materials.Fireclay);
    public static final MaterialWrapper POTASSIUMNITRADE = MaterialWrapper.of(() -> Materials.PotassiumNitrade);
    public static final MaterialWrapper CHROMIUMTRIOXIDE = MaterialWrapper.of(() -> Materials.ChromiumTrioxide);
    public static final MaterialWrapper NITROCHLOROBENZENE = MaterialWrapper.of(() -> Materials.Nitrochlorobenzene);
    public static final MaterialWrapper DIMETHYLBENZENE = MaterialWrapper.of(() -> Materials.Dimethylbenzene);
    public static final MaterialWrapper POTASSIUMDICHROMATE = MaterialWrapper.of(() -> Materials.Potassiumdichromate);
    public static final MaterialWrapper PHTHALICACID = MaterialWrapper.of(() -> Materials.PhthalicAcid);
    public static final MaterialWrapper DICHLOROBENZIDINE = MaterialWrapper.of(() -> Materials.Dichlorobenzidine);
    public static final MaterialWrapper DIAMINOBENZIDIN = MaterialWrapper.of(() -> Materials.Diaminobenzidin);
    public static final MaterialWrapper DIPHENYLISOPHTHALATE = MaterialWrapper.of(() -> Materials.Diphenylisophthalate);
    public static final MaterialWrapper POLYBENZIMIDAZOLE = MaterialWrapper.of(() -> Materials.Polybenzimidazole);
    public static final MaterialWrapper MTBEMIXTURE = MaterialWrapper.of(() -> Materials.MTBEMixture);
    public static final MaterialWrapper MTBEMIXTUREALT = MaterialWrapper.of(() -> Materials.MTBEMixtureAlt);
    public static final MaterialWrapper NITROUSOXIDE = MaterialWrapper.of(() -> Materials.NitrousOxide);
    public static final MaterialWrapper ANTIKNOCK = MaterialWrapper.of(() -> Materials.AntiKnock);
    public static final MaterialWrapper OCTANE = MaterialWrapper.of(() -> Materials.Octane);
    public static final MaterialWrapper GASOLINERAW = MaterialWrapper.of(() -> Materials.GasolineRaw);
    public static final MaterialWrapper GASOLINEREGULAR = MaterialWrapper.of(() -> Materials.GasolineRegular);
    public static final MaterialWrapper GASOLINEPREMIUM = MaterialWrapper.of(() -> Materials.GasolinePremium);
    public static final MaterialWrapper ELECTROTINE = MaterialWrapper.of(() -> Materials.Electrotine);
    public static final MaterialWrapper GALGADORIAN = MaterialWrapper.of(() -> Materials.Galgadorian);
    public static final MaterialWrapper ENHANCEDGALGADORIAN = MaterialWrapper.of(() -> Materials.EnhancedGalgadorian);
    public static final MaterialWrapper BLOODINFUSEDIRON = MaterialWrapper.of(() -> Materials.BloodInfusedIron);
    public static final MaterialWrapper SHADOW = MaterialWrapper.of(() -> Materials.Shadow);
    public static final MaterialWrapper LEDOX = MaterialWrapper.of(() -> Materials.Ledox);
    public static final MaterialWrapper QUANTIUM = MaterialWrapper.of(() -> Materials.Quantium);
    public static final MaterialWrapper MYTRYL = MaterialWrapper.of(() -> Materials.Mytryl);
    public static final MaterialWrapper BLACKPLUTONIUM = MaterialWrapper.of(() -> Materials.BlackPlutonium);
    public static final MaterialWrapper CALLISTOICE = MaterialWrapper.of(() -> Materials.CallistoIce);
    public static final MaterialWrapper DURALUMIN = MaterialWrapper.of(() -> Materials.Duralumin);
    public static final MaterialWrapper ORIHARUKON = MaterialWrapper.of(() -> Materials.Oriharukon);
    public static final MaterialWrapper MYSTERIOUSCRYSTAL = MaterialWrapper.of(() -> Materials.MysteriousCrystal);
    public static final MaterialWrapper REDSTONEALLOY = MaterialWrapper.of(() -> Materials.RedstoneAlloy);
    public static final MaterialWrapper SOULARIUM = MaterialWrapper.of(() -> Materials.Soularium);
    public static final MaterialWrapper CONDUCTIVEIRON = MaterialWrapper.of(() -> Materials.ConductiveIron);
    public static final MaterialWrapper ELECTRICALSTEEL = MaterialWrapper.of(() -> Materials.ElectricalSteel);
    public static final MaterialWrapper ENERGETICALLOY = MaterialWrapper.of(() -> Materials.EnergeticAlloy);
    public static final MaterialWrapper VIBRANTALLOY = MaterialWrapper.of(() -> Materials.VibrantAlloy);
    public static final MaterialWrapper PULSATINGIRON = MaterialWrapper.of(() -> Materials.PulsatingIron);
    public static final MaterialWrapper DARKSTEEL = MaterialWrapper.of(() -> Materials.DarkSteel);
    public static final MaterialWrapper ENDSTEEL = MaterialWrapper.of(() -> Materials.EndSteel);
    public static final MaterialWrapper CRUDESTEEL = MaterialWrapper.of(() -> Materials.CrudeSteel);
    public static final MaterialWrapper CRYSTALLINEALLOY = MaterialWrapper.of(() -> Materials.CrystallineAlloy);
    public static final MaterialWrapper MELODICALLOY = MaterialWrapper.of(() -> Materials.MelodicAlloy);
    public static final MaterialWrapper STELLARALLOY = MaterialWrapper.of(() -> Materials.StellarAlloy);
    public static final MaterialWrapper CRYSTALLINEPINKSLIME = MaterialWrapper.of(() -> Materials.CrystallinePinkSlime);
    public static final MaterialWrapper ENERGETICSILVER = MaterialWrapper.of(() -> Materials.EnergeticSilver);
    public static final MaterialWrapper VIVIDALLOY = MaterialWrapper.of(() -> Materials.VividAlloy);
    public static final MaterialWrapper ENDERIUM = MaterialWrapper.of(() -> Materials.Enderium);
    public static final MaterialWrapper MITHRIL = MaterialWrapper.of(() -> Materials.Mithril);
    public static final MaterialWrapper BLUEALLOY = MaterialWrapper.of(() -> Materials.BlueAlloy);
    public static final MaterialWrapper SHADOWIRON = MaterialWrapper.of(() -> Materials.ShadowIron);
    public static final MaterialWrapper SHADOWSTEEL = MaterialWrapper.of(() -> Materials.ShadowSteel);
    public static final MaterialWrapper ASTRALSILVER = MaterialWrapper.of(() -> Materials.AstralSilver);
    public static final MaterialWrapper INFINITYCATALYST = MaterialWrapper.of(() -> Materials.InfinityCatalyst);
    public static final MaterialWrapper INFINITY = MaterialWrapper.of(() -> Materials.Infinity);
    public static final MaterialWrapper BEDROCKIUM = MaterialWrapper.of(() -> Materials.Bedrockium);
    public static final MaterialWrapper TRINIUM = MaterialWrapper.of(() -> Materials.Trinium);
    public static final MaterialWrapper ICHORIUM = MaterialWrapper.of(() -> Materials.Ichorium);
    public static final MaterialWrapper COSMICNEUTRONIUM = MaterialWrapper.of(() -> Materials.CosmicNeutronium);
    public static final MaterialWrapper PENTACADMIUMMAGNESIUMHEXAOXID = MaterialWrapper.of(() -> Materials.Pentacadmiummagnesiumhexaoxid);
    public static final MaterialWrapper TITANIUMONABARIUMDECACOPPEREIKOSAOXID = MaterialWrapper.of(() -> Materials.Titaniumonabariumdecacoppereikosaoxid);
    public static final MaterialWrapper URANIUMTRIPLATINID = MaterialWrapper.of(() -> Materials.Uraniumtriplatinid);
    public static final MaterialWrapper VANADIUMTRIINDINID = MaterialWrapper.of(() -> Materials.Vanadiumtriindinid);
    public static final MaterialWrapper TETRAINDIUMDITINDIBARIUMTITANIUMHEPTACOPPERTETRAKAIDEKAOXID = MaterialWrapper.of(() -> Materials.Tetraindiumditindibariumtitaniumheptacoppertetrakaidekaoxid);
    public static final MaterialWrapper TETRANAQUADAHDIINDIUMHEXAPLATIUMOSMINID = MaterialWrapper.of(() -> Materials.Tetranaquadahdiindiumhexaplatiumosminid);
    public static final MaterialWrapper LONGASSSUPERCONDUCTORNAMEFORUVWIRE = MaterialWrapper.of(() -> Materials.Longasssuperconductornameforuvwire);
    public static final MaterialWrapper LONGASSSUPERCONDUCTORNAMEFORUHVWIRE = MaterialWrapper.of(() -> Materials.Longasssuperconductornameforuhvwire);
    public static final MaterialWrapper SUPERCONDUCTORUEVBASE = MaterialWrapper.of(() -> Materials.SuperconductorUEVBase);
    public static final MaterialWrapper SUPERCONDUCTORUIVBASE = MaterialWrapper.of(() -> Materials.SuperconductorUIVBase);
    public static final MaterialWrapper SUPERCONDUCTORUMVBASE = MaterialWrapper.of(() -> Materials.SuperconductorUMVBase);
    public static final MaterialWrapper SUPERCONDUCTORMV = MaterialWrapper.of(() -> Materials.SuperconductorMV);
    public static final MaterialWrapper SUPERCONDUCTORHV = MaterialWrapper.of(() -> Materials.SuperconductorHV);
    public static final MaterialWrapper SUPERCONDUCTOREV = MaterialWrapper.of(() -> Materials.SuperconductorEV);
    public static final MaterialWrapper SUPERCONDUCTORIV = MaterialWrapper.of(() -> Materials.SuperconductorIV);
    public static final MaterialWrapper SUPERCONDUCTORLUV = MaterialWrapper.of(() -> Materials.SuperconductorLuV);
    public static final MaterialWrapper SUPERCONDUCTORZPM = MaterialWrapper.of(() -> Materials.SuperconductorZPM);
    public static final MaterialWrapper SUPERCONDUCTORUV = MaterialWrapper.of(() -> Materials.SuperconductorUV);
    public static final MaterialWrapper SUPERCONDUCTORUHV = MaterialWrapper.of(() -> Materials.SuperconductorUHV);
    public static final MaterialWrapper SUPERCONDUCTORUEV = MaterialWrapper.of(() -> Materials.SuperconductorUEV);
    public static final MaterialWrapper SUPERCONDUCTORUIV = MaterialWrapper.of(() -> Materials.SuperconductorUIV);
    public static final MaterialWrapper SUPERCONDUCTORUMV = MaterialWrapper.of(() -> Materials.SuperconductorUMV);
    public static final MaterialWrapper SUPERCOOLANT = MaterialWrapper.of(() -> Materials.SuperCoolant);
    public static final MaterialWrapper ENRICHEDHOLMIUM = MaterialWrapper.of(() -> Materials.EnrichedHolmium);
    public static final MaterialWrapper TENGAMPURIFIED = MaterialWrapper.of(() -> Materials.TengamPurified);
    public static final MaterialWrapper TENGAMATTUNED = MaterialWrapper.of(() -> Materials.TengamAttuned);
    public static final MaterialWrapper TENGAMRAW = MaterialWrapper.of(() -> Materials.TengamRaw);
    public static final MaterialWrapper ACTIVATEDCARBON = MaterialWrapper.of(() -> Materials.ActivatedCarbon);
    public static final MaterialWrapper PREACTIVATEDCARBON = MaterialWrapper.of(() -> Materials.PreActivatedCarbon);
    public static final MaterialWrapper DIRTYACTIVATEDCARBON = MaterialWrapper.of(() -> Materials.DirtyActivatedCarbon);
    public static final MaterialWrapper POLYALUMINIUMCHLORIDE = MaterialWrapper.of(() -> Materials.PolyAluminiumChloride);
    public static final MaterialWrapper OZONE = MaterialWrapper.of(() -> Materials.Ozone);
    public static final MaterialWrapper STABLEBARYONICMATTER = MaterialWrapper.of(() -> Materials.StableBaryonicMatter);
    public static final MaterialWrapper RAWRADOX = MaterialWrapper.of(() -> Materials.RawRadox);
    public static final MaterialWrapper RADOXSUPERLIGHT = MaterialWrapper.of(() -> Materials.RadoxSuperLight);
    public static final MaterialWrapper RADOXLIGHT = MaterialWrapper.of(() -> Materials.RadoxLight);
    public static final MaterialWrapper RADOXHEAVY = MaterialWrapper.of(() -> Materials.RadoxHeavy);
    public static final MaterialWrapper RADOXSUPERHEAVY = MaterialWrapper.of(() -> Materials.RadoxSuperHeavy);
    public static final MaterialWrapper XENOXENE = MaterialWrapper.of(() -> Materials.Xenoxene);
    public static final MaterialWrapper DILUTEDXENOXENE = MaterialWrapper.of(() -> Materials.DilutedXenoxene);
    public static final MaterialWrapper RADOXCRACKED = MaterialWrapper.of(() -> Materials.RadoxCracked);
    public static final MaterialWrapper RADOXGAS = MaterialWrapper.of(() -> Materials.RadoxGas);
    public static final MaterialWrapper RADOXPOLYMER = MaterialWrapper.of(() -> Materials.RadoxPolymer);
    //#endregion

    //#region src/main/java/gregtech/api/enums/MaterialsKevlar.java
    public static final MaterialWrapper DIPHENYLMETHANEDIISOCYANATE = MaterialWrapper.of(() -> MaterialsKevlar.DiphenylmethaneDiisocyanate);
    public static final MaterialWrapper DIAMINODIPHENYLMETHANMIXTURE = MaterialWrapper.of(() -> MaterialsKevlar.DiaminodiphenylmethanMixture);
    public static final MaterialWrapper DIPHENYLMETHANEDIISOCYANATEMIXTURE = MaterialWrapper.of(() -> MaterialsKevlar.DiphenylmethaneDiisocyanateMixture);
    public static final MaterialWrapper BUTYRALDEHYDE = MaterialWrapper.of(() -> MaterialsKevlar.Butyraldehyde);
    public static final MaterialWrapper ISOBUTYRALDEHYDE = MaterialWrapper.of(() -> MaterialsKevlar.Isobutyraldehyde);
    public static final MaterialWrapper NICKELTETRACARBONYL = MaterialWrapper.of(() -> MaterialsKevlar.NickelTetracarbonyl);
    public static final MaterialWrapper KEVLARCATALYST = MaterialWrapper.of(() -> MaterialsKevlar.KevlarCatalyst);
    public static final MaterialWrapper ETHYLENEOXIDE = MaterialWrapper.of(() -> MaterialsKevlar.EthyleneOxide);
    public static final MaterialWrapper SILICONOIL = MaterialWrapper.of(() -> MaterialsKevlar.SiliconOil);
    public static final MaterialWrapper ETHYLENEGLYCOL = MaterialWrapper.of(() -> MaterialsKevlar.Ethyleneglycol);
    public static final MaterialWrapper ACETALDEHYDE = MaterialWrapper.of(() -> MaterialsKevlar.Acetaldehyde);
    public static final MaterialWrapper PENTAERYTHRITOL = MaterialWrapper.of(() -> MaterialsKevlar.Pentaerythritol);
    public static final MaterialWrapper POLYURETHANERESIN = MaterialWrapper.of(() -> MaterialsKevlar.PolyurethaneResin);
    public static final MaterialWrapper NMETHYLIIPYRROLIDONE = MaterialWrapper.of(() -> MaterialsKevlar.NMethylIIPyrrolidone);
    public static final MaterialWrapper TEREPHTHALOYLCHLORIDE = MaterialWrapper.of(() -> MaterialsKevlar.TerephthaloylChloride);
    public static final MaterialWrapper ACETYLENE = MaterialWrapper.of(() -> MaterialsKevlar.Acetylene);
    public static final MaterialWrapper IVNITROANILINE = MaterialWrapper.of(() -> MaterialsKevlar.IVNitroaniline);
    public static final MaterialWrapper PARAPHENYLENEDIAMINE = MaterialWrapper.of(() -> MaterialsKevlar.ParaPhenylenediamine);
    public static final MaterialWrapper METHYLAMINE = MaterialWrapper.of(() -> MaterialsKevlar.Methylamine);
    public static final MaterialWrapper TRIMETHYLAMINE = MaterialWrapper.of(() -> MaterialsKevlar.Trimethylamine);
    public static final MaterialWrapper GAMMABUTYROLACTONE = MaterialWrapper.of(() -> MaterialsKevlar.GammaButyrolactone);
    public static final MaterialWrapper CALCIUMCARBIDE = MaterialWrapper.of(() -> MaterialsKevlar.CalciumCarbide);
    public static final MaterialWrapper LIQUIDCRYSTALKEVLAR = MaterialWrapper.of(() -> MaterialsKevlar.LiquidCrystalKevlar);
    public static final MaterialWrapper IIBUTINIIVDIOL = MaterialWrapper.of(() -> MaterialsKevlar.IIButinIIVdiol);
    public static final MaterialWrapper NICKELALUMINIDE = MaterialWrapper.of(() -> MaterialsKevlar.NickelAluminide);
    public static final MaterialWrapper RANEYNICKELACTIVATED = MaterialWrapper.of(() -> MaterialsKevlar.RaneyNickelActivated);
    public static final MaterialWrapper BISMUTHIIIOXIDE = MaterialWrapper.of(() -> MaterialsKevlar.BismuthIIIOxide);
    public static final MaterialWrapper THIONYLCHLORIDE = MaterialWrapper.of(() -> MaterialsKevlar.ThionylChloride);
    public static final MaterialWrapper SULFURDICHLORIDE = MaterialWrapper.of(() -> MaterialsKevlar.SulfurDichloride);
    public static final MaterialWrapper DIMETHYLTEREPHTHALATE = MaterialWrapper.of(() -> MaterialsKevlar.DimethylTerephthalate);
    public static final MaterialWrapper KEVLAR = MaterialWrapper.of(() -> MaterialsKevlar.Kevlar);
    public static final MaterialWrapper TEREPHTHALICACID = MaterialWrapper.of(() -> MaterialsKevlar.TerephthalicAcid);
    public static final MaterialWrapper IIIDIMETHYLBENZENE = MaterialWrapper.of(() -> MaterialsKevlar.IIIDimethylbenzene);
    public static final MaterialWrapper IVDIMETHYLBENZENE = MaterialWrapper.of(() -> MaterialsKevlar.IVDimethylbenzene);
    public static final MaterialWrapper COBALTIINAPHTHENATE = MaterialWrapper.of(() -> MaterialsKevlar.CobaltIINaphthenate);
    public static final MaterialWrapper NAPHTHENICACID = MaterialWrapper.of(() -> MaterialsKevlar.NaphthenicAcid);
    public static final MaterialWrapper COBALTIIHYDROXIDE = MaterialWrapper.of(() -> MaterialsKevlar.CobaltIIHydroxide);
    public static final MaterialWrapper COBALTIIACETATE = MaterialWrapper.of(() -> MaterialsKevlar.CobaltIIAcetate);
    public static final MaterialWrapper COBALTIINITRATE = MaterialWrapper.of(() -> MaterialsKevlar.CobaltIINitrate);
    public static final MaterialWrapper ORGANORHODIUMCATALYST = MaterialWrapper.of(() -> MaterialsKevlar.OrganorhodiumCatalyst);
    public static final MaterialWrapper SODIUMBOROHYDRIDE = MaterialWrapper.of(() -> MaterialsKevlar.SodiumBorohydride);
    public static final MaterialWrapper RHODIUMCHLORIDE = MaterialWrapper.of(() -> MaterialsKevlar.RhodiumChloride);
    public static final MaterialWrapper TRIPHENYLPHOSPHENE = MaterialWrapper.of(() -> MaterialsKevlar.Triphenylphosphene);
    public static final MaterialWrapper PHOSPHORUSTRICHLORIDE = MaterialWrapper.of(() -> MaterialsKevlar.PhosphorusTrichloride);
    public static final MaterialWrapper SODIUMHYDRIDE = MaterialWrapper.of(() -> MaterialsKevlar.SodiumHydride);
    public static final MaterialWrapper TRIMETHYLBORATE = MaterialWrapper.of(() -> MaterialsKevlar.TrimethylBorate);
    public static final MaterialWrapper SODIUMMETHOXIDE = MaterialWrapper.of(() -> MaterialsKevlar.SodiumMethoxide);
    //#endregion

    //#region src/main/java/gregtech/api/enums/MaterialsUEVplus.java
    public static final MaterialWrapper DIMENSIONALLYTRANSCENDENTCRUDECATALYST = MaterialWrapper.of(() -> MaterialsUEVplus.DimensionallyTranscendentCrudeCatalyst);
    public static final MaterialWrapper DIMENSIONALLYTRANSCENDENTPROSAICCATALYST = MaterialWrapper.of(() -> MaterialsUEVplus.DimensionallyTranscendentProsaicCatalyst);
    public static final MaterialWrapper DIMENSIONALLYTRANSCENDENTRESPLENDENTCATALYST = MaterialWrapper.of(() -> MaterialsUEVplus.DimensionallyTranscendentResplendentCatalyst);
    public static final MaterialWrapper DIMENSIONALLYTRANSCENDENTEXOTICCATALYST = MaterialWrapper.of(() -> MaterialsUEVplus.DimensionallyTranscendentExoticCatalyst);
    public static final MaterialWrapper DIMENSIONALLYTRANSCENDENTSTELLARCATALYST = MaterialWrapper.of(() -> MaterialsUEVplus.DimensionallyTranscendentStellarCatalyst);
    public static final MaterialWrapper EXCITEDDTCC = MaterialWrapper.of(() -> MaterialsUEVplus.ExcitedDTCC);
    public static final MaterialWrapper EXCITEDDTPC = MaterialWrapper.of(() -> MaterialsUEVplus.ExcitedDTPC);
    public static final MaterialWrapper EXCITEDDTRC = MaterialWrapper.of(() -> MaterialsUEVplus.ExcitedDTRC);
    public static final MaterialWrapper EXCITEDDTEC = MaterialWrapper.of(() -> MaterialsUEVplus.ExcitedDTEC);
    public static final MaterialWrapper EXCITEDDTSC = MaterialWrapper.of(() -> MaterialsUEVplus.ExcitedDTSC);
    public static final MaterialWrapper DIMENSIONALLYTRANSCENDENTRESIDUE = MaterialWrapper.of(() -> MaterialsUEVplus.DimensionallyTranscendentResidue);
    public static final MaterialWrapper SPACETIME = MaterialWrapper.of(() -> MaterialsUEVplus.SpaceTime);
    public static final MaterialWrapper TRANSCENDENTMETAL = MaterialWrapper.of(() -> MaterialsUEVplus.TranscendentMetal);
    public static final MaterialWrapper MAGNETOHYDRODYNAMICALLYCONSTRAINEDSTARMATTER = MaterialWrapper.of(() -> MaterialsUEVplus.MagnetohydrodynamicallyConstrainedStarMatter);
    public static final MaterialWrapper RAWSTARMATTER = MaterialWrapper.of(() -> MaterialsUEVplus.RawStarMatter);
    public static final MaterialWrapper WHITEDWARFMATTER = MaterialWrapper.of(() -> MaterialsUEVplus.WhiteDwarfMatter);
    public static final MaterialWrapper BLACKDWARFMATTER = MaterialWrapper.of(() -> MaterialsUEVplus.BlackDwarfMatter);
    public static final MaterialWrapper TIME = MaterialWrapper.of(() -> MaterialsUEVplus.Time);
    public static final MaterialWrapper SPACE = MaterialWrapper.of(() -> MaterialsUEVplus.Space);
    public static final MaterialWrapper UNIVERSIUM = MaterialWrapper.of(() -> MaterialsUEVplus.Universium);
    public static final MaterialWrapper ETERNITY = MaterialWrapper.of(() -> MaterialsUEVplus.Eternity);
    public static final MaterialWrapper PRIMORDIALMATTER = MaterialWrapper.of(() -> MaterialsUEVplus.PrimordialMatter);
    public static final MaterialWrapper MAGMATTER = MaterialWrapper.of(() -> MaterialsUEVplus.MagMatter);
    public static final MaterialWrapper QUARKGLUONPLASMA = MaterialWrapper.of(() -> MaterialsUEVplus.QuarkGluonPlasma);
    public static final MaterialWrapper PHONONMEDIUM = MaterialWrapper.of(() -> MaterialsUEVplus.PhononMedium);
    public static final MaterialWrapper PHONONCRYSTALSOLUTION = MaterialWrapper.of(() -> MaterialsUEVplus.PhononCrystalSolution);
    public static final MaterialWrapper SIXPHASEDCOPPER = MaterialWrapper.of(() -> MaterialsUEVplus.SixPhasedCopper);
    public static final MaterialWrapper MELLION = MaterialWrapper.of(() -> MaterialsUEVplus.Mellion);
    public static final MaterialWrapper CREON = MaterialWrapper.of(() -> MaterialsUEVplus.Creon);
    public static final MaterialWrapper GRAVITONSHARD = MaterialWrapper.of(() -> MaterialsUEVplus.GravitonShard);
    public static final MaterialWrapper DIMENSIONALLYSHIFTEDSUPERFLUID = MaterialWrapper.of(() -> MaterialsUEVplus.DimensionallyShiftedSuperfluid);
    public static final MaterialWrapper MOLTENPROTOHALKONITEBASE = MaterialWrapper.of(() -> MaterialsUEVplus.MoltenProtoHalkoniteBase);
    public static final MaterialWrapper HOTPROTOHALKONITE = MaterialWrapper.of(() -> MaterialsUEVplus.HotProtoHalkonite);
    public static final MaterialWrapper PROTOHALKONITE = MaterialWrapper.of(() -> MaterialsUEVplus.ProtoHalkonite);
    public static final MaterialWrapper MOLTENEXOHALKONITEBASE = MaterialWrapper.of(() -> MaterialsUEVplus.MoltenExoHalkoniteBase);
    public static final MaterialWrapper HOTEXOHALKONITE = MaterialWrapper.of(() -> MaterialsUEVplus.HotExoHalkonite);
    public static final MaterialWrapper EXOHALKONITE = MaterialWrapper.of(() -> MaterialsUEVplus.ExoHalkonite);
    public static final MaterialWrapper STARGATECRYSTALSLURRY = MaterialWrapper.of(() -> MaterialsUEVplus.StargateCrystalSlurry);
    //#endregion

    //#region src/main/java/bartworks/system/material/WerkstoffLoader.java
    public static final MaterialWrapper BISMUTITE = MaterialWrapper.of(() -> WerkstoffLoader.Bismutite);
    public static final MaterialWrapper BISMUTHINIT = MaterialWrapper.of(() -> WerkstoffLoader.Bismuthinit);
    public static final MaterialWrapper ZIRCONIUM = MaterialWrapper.of(() -> WerkstoffLoader.Zirconium);
    public static final MaterialWrapper CUBICZIRCONIA = MaterialWrapper.of(() -> WerkstoffLoader.CubicZirconia);
    public static final MaterialWrapper FLUORBUERGERIT = MaterialWrapper.of(() -> WerkstoffLoader.FluorBuergerit);
    public static final MaterialWrapper YTTRIUMOXIDE = MaterialWrapper.of(() -> WerkstoffLoader.YttriumOxide);
    public static final MaterialWrapper CHROMOALUMINOPOVONDRAIT = MaterialWrapper.of(() -> WerkstoffLoader.ChromoAluminoPovondrait);
    public static final MaterialWrapper VANADIOOXYDRAVIT = MaterialWrapper.of(() -> WerkstoffLoader.VanadioOxyDravit);
    public static final MaterialWrapper OLENIT = MaterialWrapper.of(() -> WerkstoffLoader.Olenit);
    public static final MaterialWrapper ARSENOPYRITE = MaterialWrapper.of(() -> WerkstoffLoader.Arsenopyrite);
    public static final MaterialWrapper FERBERITE = MaterialWrapper.of(() -> WerkstoffLoader.Ferberite);
    public static final MaterialWrapper LOELLINGIT = MaterialWrapper.of(() -> WerkstoffLoader.Loellingit);
    public static final MaterialWrapper ROQUESIT = MaterialWrapper.of(() -> WerkstoffLoader.Roquesit);
    public static final MaterialWrapper BORNITE = MaterialWrapper.of(() -> WerkstoffLoader.Bornite);
    public static final MaterialWrapper WITTICHENIT = MaterialWrapper.of(() -> WerkstoffLoader.Wittichenit);
    public static final MaterialWrapper DJURLEIT = MaterialWrapper.of(() -> WerkstoffLoader.Djurleit);
    public static final MaterialWrapper HUEBNERIT = MaterialWrapper.of(() -> WerkstoffLoader.Huebnerit);
    public static final MaterialWrapper THORIANIT = MaterialWrapper.of(() -> WerkstoffLoader.Thorianit);
    public static final MaterialWrapper REDZIRCON = MaterialWrapper.of(() -> WerkstoffLoader.RedZircon);
    public static final MaterialWrapper SPODUMEN = MaterialWrapper.of(() -> WerkstoffLoader.Spodumen);
    public static final MaterialWrapper FAYALIT = MaterialWrapper.of(() -> WerkstoffLoader.Fayalit);
    public static final MaterialWrapper FORSTERIT = MaterialWrapper.of(() -> WerkstoffLoader.Forsterit);
    public static final MaterialWrapper HEDENBERGIT = MaterialWrapper.of(() -> WerkstoffLoader.Hedenbergit);
    public static final MaterialWrapper DESCLOIZITEZNVO4 = MaterialWrapper.of(() -> WerkstoffLoader.DescloiziteZNVO4);
    public static final MaterialWrapper DESCLOIZITECUVO4 = MaterialWrapper.of(() -> WerkstoffLoader.DescloiziteCUVO4);
    public static final MaterialWrapper FUCHSITAL = MaterialWrapper.of(() -> WerkstoffLoader.FuchsitAL);
    public static final MaterialWrapper FUCHSITCR = MaterialWrapper.of(() -> WerkstoffLoader.FuchsitCR);
    public static final MaterialWrapper THORIUM232 = MaterialWrapper.of(() -> WerkstoffLoader.Thorium232);
    public static final MaterialWrapper BISMUTHTELLURITE = MaterialWrapper.of(() -> WerkstoffLoader.BismuthTellurite);
    public static final MaterialWrapper BISMUTHHYDROBORAT = MaterialWrapper.of(() -> WerkstoffLoader.BismuthHydroBorat);
    public static final MaterialWrapper ARINGAPHOBIBOTE = MaterialWrapper.of(() -> WerkstoffLoader.ArInGaPhoBiBoTe);
    public static final MaterialWrapper PRASIOLITE = MaterialWrapper.of(() -> WerkstoffLoader.Prasiolite);
    public static final MaterialWrapper MAGNETORESONATICDUST = MaterialWrapper.of(() -> WerkstoffLoader.MagnetoResonaticDust);
    public static final MaterialWrapper XENON = MaterialWrapper.of(() -> WerkstoffLoader.Xenon);
    public static final MaterialWrapper OGANESSON = MaterialWrapper.of(() -> WerkstoffLoader.Oganesson);
    public static final MaterialWrapper CALIFORNIUM = MaterialWrapper.of(() -> WerkstoffLoader.Californium);
    public static final MaterialWrapper NEON = MaterialWrapper.of(() -> WerkstoffLoader.Neon);
    public static final MaterialWrapper KRYPTON = MaterialWrapper.of(() -> WerkstoffLoader.Krypton);
    public static final MaterialWrapper BARTIMAEUSNEK = MaterialWrapper.of(() -> WerkstoffLoader.BArTiMaEuSNeK);
    public static final MaterialWrapper PTCONCENTRATE = MaterialWrapper.of(() -> WerkstoffLoader.PTConcentrate);
    public static final MaterialWrapper PTSALTCRUDE = MaterialWrapper.of(() -> WerkstoffLoader.PTSaltCrude);
    public static final MaterialWrapper PTSALTREFINED = MaterialWrapper.of(() -> WerkstoffLoader.PTSaltRefined);
    public static final MaterialWrapper PTMETALLICPOWDER = MaterialWrapper.of(() -> WerkstoffLoader.PTMetallicPowder);
    public static final MaterialWrapper AQUAREGIA = MaterialWrapper.of(() -> WerkstoffLoader.AquaRegia);
    public static final MaterialWrapper PTRESIDUE = MaterialWrapper.of(() -> WerkstoffLoader.PTResidue);
    public static final MaterialWrapper AMMONIUMCHLORIDE = MaterialWrapper.of(() -> WerkstoffLoader.AmmoniumChloride);
    public static final MaterialWrapper PTRAWPOWDER = MaterialWrapper.of(() -> WerkstoffLoader.PTRawPowder);
    public static final MaterialWrapper PDAMMONIA = MaterialWrapper.of(() -> WerkstoffLoader.PDAmmonia);
    public static final MaterialWrapper PDMETALLICPOWDER = MaterialWrapper.of(() -> WerkstoffLoader.PDMetallicPowder);
    public static final MaterialWrapper PDRAWPOWDER = MaterialWrapper.of(() -> WerkstoffLoader.PDRawPowder);
    public static final MaterialWrapper PDSALT = MaterialWrapper.of(() -> WerkstoffLoader.PDSalt);
    public static final MaterialWrapper SODIUMFORMATE = MaterialWrapper.of(() -> WerkstoffLoader.Sodiumformate);
    public static final MaterialWrapper SODIUMSULFATE = MaterialWrapper.of(() -> WerkstoffLoader.Sodiumsulfate);
    public static final MaterialWrapper FORMICACID = MaterialWrapper.of(() -> WerkstoffLoader.FormicAcid);
    public static final MaterialWrapper POTASSIUMDISULFATE = MaterialWrapper.of(() -> WerkstoffLoader.PotassiumDisulfate);
    public static final MaterialWrapper LEACHRESIDUE = MaterialWrapper.of(() -> WerkstoffLoader.LeachResidue);
    public static final MaterialWrapper RHSULFATE = MaterialWrapper.of(() -> WerkstoffLoader.RHSulfate);
    public static final MaterialWrapper RHSULFATESOLUTION = MaterialWrapper.of(() -> WerkstoffLoader.RHSulfateSolution);
    public static final MaterialWrapper CALCIUMCHLORIDE = MaterialWrapper.of(() -> WerkstoffLoader.CalciumChloride);
    public static final MaterialWrapper RUTHENIUM = MaterialWrapper.of(() -> WerkstoffLoader.Ruthenium);
    public static final MaterialWrapper SODIUMRUTHENATE = MaterialWrapper.of(() -> WerkstoffLoader.SodiumRuthenate);
    public static final MaterialWrapper RUTHENIUMTETROXIDE = MaterialWrapper.of(() -> WerkstoffLoader.RutheniumTetroxide);
    public static final MaterialWrapper HOTRUTHENIUMTETROXIDESOLLUTION = MaterialWrapper.of(() -> WerkstoffLoader.HotRutheniumTetroxideSollution);
    public static final MaterialWrapper RUTHENIUMTETROXIDESOLLUTION = MaterialWrapper.of(() -> WerkstoffLoader.RutheniumTetroxideSollution);
    public static final MaterialWrapper IROSLEACHRESIDUE = MaterialWrapper.of(() -> WerkstoffLoader.IrOsLeachResidue);
    public static final MaterialWrapper IRLEACHRESIDUE = MaterialWrapper.of(() -> WerkstoffLoader.IrLeachResidue);
    public static final MaterialWrapper PGSDRESIDUE = MaterialWrapper.of(() -> WerkstoffLoader.PGSDResidue);
    public static final MaterialWrapper ACIDICOSMIUMSOLUTION = MaterialWrapper.of(() -> WerkstoffLoader.AcidicOsmiumSolution);
    public static final MaterialWrapper IRIDIUMDIOXIDE = MaterialWrapper.of(() -> WerkstoffLoader.IridiumDioxide);
    public static final MaterialWrapper OSMIUMSOLUTION = MaterialWrapper.of(() -> WerkstoffLoader.OsmiumSolution);
    public static final MaterialWrapper ACIDICIRIDIUMSOLUTION = MaterialWrapper.of(() -> WerkstoffLoader.AcidicIridiumSolution);
    public static final MaterialWrapper IRIDIUMCHLORIDE = MaterialWrapper.of(() -> WerkstoffLoader.IridiumChloride);
    public static final MaterialWrapper PGSDRESIDUE2 = MaterialWrapper.of(() -> WerkstoffLoader.PGSDResidue2);
    public static final MaterialWrapper RHODIUM = MaterialWrapper.of(() -> WerkstoffLoader.Rhodium);
    public static final MaterialWrapper CRUDERHMETALL = MaterialWrapper.of(() -> WerkstoffLoader.CrudeRhMetall);
    public static final MaterialWrapper RHSALT = MaterialWrapper.of(() -> WerkstoffLoader.RHSalt);
    public static final MaterialWrapper RHSALTSOLUTION = MaterialWrapper.of(() -> WerkstoffLoader.RHSaltSolution);
    public static final MaterialWrapper SODIUMNITRATE = MaterialWrapper.of(() -> WerkstoffLoader.SodiumNitrate);
    public static final MaterialWrapper RHNITRATE = MaterialWrapper.of(() -> WerkstoffLoader.RHNitrate);
    public static final MaterialWrapper ZINCSULFATE = MaterialWrapper.of(() -> WerkstoffLoader.ZincSulfate);
    public static final MaterialWrapper RHFILTERCAKE = MaterialWrapper.of(() -> WerkstoffLoader.RhFilterCake);
    public static final MaterialWrapper RHFILTERCAKESOLUTION = MaterialWrapper.of(() -> WerkstoffLoader.RHFilterCakeSolution);
    public static final MaterialWrapper RERH = MaterialWrapper.of(() -> WerkstoffLoader.ReRh);
    public static final MaterialWrapper LUVTIERMATERIAL = MaterialWrapper.of(() -> WerkstoffLoader.LuVTierMaterial);
    public static final MaterialWrapper TIBERIUM = MaterialWrapper.of(() -> WerkstoffLoader.Tiberium);
    public static final MaterialWrapper RURIDIT = MaterialWrapper.of(() -> WerkstoffLoader.Ruridit);
    public static final MaterialWrapper FLUORSPAR = MaterialWrapper.of(() -> WerkstoffLoader.Fluorspar);
    public static final MaterialWrapper HDCS = MaterialWrapper.of(() -> WerkstoffLoader.HDCS);
    public static final MaterialWrapper ATHENEITE = MaterialWrapper.of(() -> WerkstoffLoader.Atheneite);
    public static final MaterialWrapper TEMAGAMITE = MaterialWrapper.of(() -> WerkstoffLoader.Temagamite);
    public static final MaterialWrapper TERLINGUAITE = MaterialWrapper.of(() -> WerkstoffLoader.Terlinguaite);
    public static final MaterialWrapper ADEMICSTEEL = MaterialWrapper.of(() -> WerkstoffLoader.AdemicSteel);
    public static final MaterialWrapper RAWADEMICSTEEL = MaterialWrapper.of(() -> WerkstoffLoader.RawAdemicSteel);
    public static final MaterialWrapper HEXAFLUOROSILICICACID = MaterialWrapper.of(() -> WerkstoffLoader.HexafluorosilicicAcid);
    public static final MaterialWrapper POTASSIUMFLUOROSILICATE = MaterialWrapper.of(() -> WerkstoffLoader.Potassiumfluorosilicate);
    public static final MaterialWrapper ALUMINA = MaterialWrapper.of(() -> WerkstoffLoader.Alumina);
    public static final MaterialWrapper POTASSIUMCARBONATE = MaterialWrapper.of(() -> WerkstoffLoader.PotassiumCarbonate);
    public static final MaterialWrapper RAWFLUOROPHLOGOPITE = MaterialWrapper.of(() -> WerkstoffLoader.RawFluorophlogopite);
    public static final MaterialWrapper HOTFLUOROPHLOGOPITE = MaterialWrapper.of(() -> WerkstoffLoader.HotFluorophlogopite);
    public static final MaterialWrapper FLUOROPHLOGOPITE = MaterialWrapper.of(() -> WerkstoffLoader.Fluorophlogopite);
    public static final MaterialWrapper LIQUIDHELIUM = MaterialWrapper.of(() -> WerkstoffLoader.LiquidHelium);
    public static final MaterialWrapper HAFNIUMCARBIDE = MaterialWrapper.of(() -> WerkstoffLoader.HafniumCarbide);
    public static final MaterialWrapper TANTALUMCARBIDEHAFNIUMCARBIDEMIXTURE = MaterialWrapper.of(() -> WerkstoffLoader.TantalumCarbideHafniumCarbideMixture);
    public static final MaterialWrapper TANTALUMHAFNIUMCARBIDE = MaterialWrapper.of(() -> WerkstoffLoader.TantalumHafniumCarbide);
    //#endregion

    //#region src/main/java/gtnhlanth/common/register/WerkstoffMaterialPool.java
    public static final MaterialWrapper HAFNIUM = MaterialWrapper.of(() -> WerkstoffMaterialPool.Hafnium);
    public static final MaterialWrapper LOWPURITYHAFNIUM = MaterialWrapper.of(() -> WerkstoffMaterialPool.LowPurityHafnium);
    public static final MaterialWrapper HAFNIA = MaterialWrapper.of(() -> WerkstoffMaterialPool.Hafnia);
    public static final MaterialWrapper HAFNIUMTETRACHLORIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.HafniumTetrachloride);
    public static final MaterialWrapper HAFNIUMTETRACHLORIDESOLUTION = MaterialWrapper.of(() -> WerkstoffMaterialPool.HafniumTetrachlorideSolution);
    public static final MaterialWrapper HAFNIUMIODIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.HafniumIodide);
    public static final MaterialWrapper HAFNIUMRUNOFF = MaterialWrapper.of(() -> WerkstoffMaterialPool.HafniumRunoff);
    public static final MaterialWrapper ZIRCONIA = MaterialWrapper.of(() -> WerkstoffMaterialPool.Zirconia);
    public static final MaterialWrapper ZIRCONIUMTETRACHLORIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.ZirconiumTetrachloride);
    public static final MaterialWrapper ZIRCONIUMTETRACHLORIDESOLUTION = MaterialWrapper.of(() -> WerkstoffMaterialPool.ZirconiumTetrachlorideSolution);
    public static final MaterialWrapper HAFNIAZIRCONIABLEND = MaterialWrapper.of(() -> WerkstoffMaterialPool.HafniaZirconiaBlend);
    public static final MaterialWrapper IODINE = MaterialWrapper.of(() -> WerkstoffMaterialPool.Iodine);
    public static final MaterialWrapper MUDDYRAREEARTHMONAZITESOLUTION = MaterialWrapper.of(() -> WerkstoffMaterialPool.MuddyRareEarthMonaziteSolution);
    public static final MaterialWrapper DILUTEDRAREEARTHMONAZITEMUD = MaterialWrapper.of(() -> WerkstoffMaterialPool.DilutedRareEarthMonaziteMud);
    public static final MaterialWrapper DILUTEDMONAZITESULFATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.DilutedMonaziteSulfate);
    public static final MaterialWrapper NITRATEDRAREEARTHMONAZITECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.NitratedRareEarthMonaziteConcentrate);
    public static final MaterialWrapper NITRICMONAZITELEACHEDCONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.NitricMonaziteLeachedConcentrate);
    public static final MaterialWrapper MONAZITESULFATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.MonaziteSulfate);
    public static final MaterialWrapper ACIDICMONAZITEPOWDER = MaterialWrapper.of(() -> WerkstoffMaterialPool.AcidicMonazitePowder);
    public static final MaterialWrapper MONAZITERAREEARTHFILTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.MonaziteRareEarthFiltrate);
    public static final MaterialWrapper NEUTRALIZEDMONAZITERAREEARTHFILTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.NeutralizedMonaziteRareEarthFiltrate);
    public static final MaterialWrapper MONAZITERAREEARTHHYDROXIDECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.MonaziteRareEarthHydroxideConcentrate);
    public static final MaterialWrapper DRIEDMONAZITERAREEARTHCONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.DriedMonaziteRareEarthConcentrate);
    public static final MaterialWrapper CERIUMDIOXIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.CeriumDioxide);
    public static final MaterialWrapper CERIUMCHLORIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.CeriumChloride);
    public static final MaterialWrapper CERIUMOXALATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.CeriumOxalate);
    public static final MaterialWrapper CERIUMIIIOXIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.CeriumIIIOxide);
    public static final MaterialWrapper CERIUMRICHMIXTURE = MaterialWrapper.of(() -> WerkstoffMaterialPool.CeriumRichMixture);
    public static final MaterialWrapper COOLEDMONAZITERAREEARTHCONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.CooledMonaziteRareEarthConcentrate);
    public static final MaterialWrapper MONAZITERAREREARTHSEDIMENT = MaterialWrapper.of(() -> WerkstoffMaterialPool.MonaziteRarerEarthSediment);
    public static final MaterialWrapper MONAZITEHETEROGENOUSHALOGENICRAREEARTHMIXTURE = MaterialWrapper.of(() -> WerkstoffMaterialPool.MonaziteHeterogenousHalogenicRareEarthMixture);
    public static final MaterialWrapper SATURATEDMONAZITERAREEARTHMIXTURE = MaterialWrapper.of(() -> WerkstoffMaterialPool.SaturatedMonaziteRareEarthMixture);
    public static final MaterialWrapper SAMARICRESIDUE = MaterialWrapper.of(() -> WerkstoffMaterialPool.SamaricResidue);
    public static final MaterialWrapper AMMONIUMNITRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.AmmoniumNitrate);
    public static final MaterialWrapper THORIUMPHOSPHATECAKE = MaterialWrapper.of(() -> WerkstoffMaterialPool.ThoriumPhosphateCake);
    public static final MaterialWrapper THORIUMPHOSPHATECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.ThoriumPhosphateConcentrate);
    public static final MaterialWrapper URANIUMFILTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.UraniumFiltrate);
    public static final MaterialWrapper NEUTRALIZEDURANIUMFILTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.NeutralizedUraniumFiltrate);
    public static final MaterialWrapper SEAWEEDASH = MaterialWrapper.of(() -> WerkstoffMaterialPool.SeaweedAsh);
    public static final MaterialWrapper SEAWEEDCONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.SeaweedConcentrate);
    public static final MaterialWrapper POTASSIUMPERMANGANATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.PotassiumPermanganate);
    public static final MaterialWrapper POTASSIUMPERMANGANATESOLUTION = MaterialWrapper.of(() -> WerkstoffMaterialPool.PotassiumPermanganateSolution);
    public static final MaterialWrapper SEAWEEDBYPRODUCTS = MaterialWrapper.of(() -> WerkstoffMaterialPool.SeaweedByproducts);
    public static final MaterialWrapper NITRICLEACHEDMONAZITEMIXTURE = MaterialWrapper.of(() -> WerkstoffMaterialPool.NitricLeachedMonaziteMixture);
    public static final MaterialWrapper EUROPIUMOXIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.EuropiumOxide);
    public static final MaterialWrapper EUROPIUMSULFIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.EuropiumSulfide);
    public static final MaterialWrapper UNKNOWNBLEND = MaterialWrapper.of(() -> WerkstoffMaterialPool.UnknownBlend);
    public static final MaterialWrapper EUROPIUMIIIOXIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.EuropiumIIIOxide);
    public static final MaterialWrapper MUDDYRAREEARTHBASTNASITESOLUTION = MaterialWrapper.of(() -> WerkstoffMaterialPool.MuddyRareEarthBastnasiteSolution);
    public static final MaterialWrapper SODIUMFLUOROSILICATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.SodiumFluorosilicate);
    public static final MaterialWrapper STEAMCRACKEDBASNASITESOLUTION = MaterialWrapper.of(() -> WerkstoffMaterialPool.SteamCrackedBasnasiteSolution);
    public static final MaterialWrapper CONDITIONEDBASTNASITEMUD = MaterialWrapper.of(() -> WerkstoffMaterialPool.ConditionedBastnasiteMud);
    public static final MaterialWrapper DILTEDRAREEARTHBASTNASITEMUD = MaterialWrapper.of(() -> WerkstoffMaterialPool.DiltedRareEarthBastnasiteMud);
    public static final MaterialWrapper FILTEREDBASTNASITEMUD = MaterialWrapper.of(() -> WerkstoffMaterialPool.FilteredBastnasiteMud);
    public static final MaterialWrapper BASTNASITERAREEARTHOXIDEPOWDER = MaterialWrapper.of(() -> WerkstoffMaterialPool.BastnasiteRareEarthOxidePowder);
    public static final MaterialWrapper LEACHEDBASTNASITERAREEARTHOXIDES = MaterialWrapper.of(() -> WerkstoffMaterialPool.LeachedBastnasiteRareEarthOxides);
    public static final MaterialWrapper GANGUE = MaterialWrapper.of(() -> WerkstoffMaterialPool.Gangue);
    public static final MaterialWrapper ROASTEDRAREEARTHOXIDES = MaterialWrapper.of(() -> WerkstoffMaterialPool.RoastedRareEarthOxides);
    public static final MaterialWrapper WETRAREEARTHOXIDES = MaterialWrapper.of(() -> WerkstoffMaterialPool.WetRareEarthOxides);
    public static final MaterialWrapper CERIUMOXIDISEDRAREEARTHOXIDES = MaterialWrapper.of(() -> WerkstoffMaterialPool.CeriumOxidisedRareEarthOxides);
    public static final MaterialWrapper BASTNASITERAREREARTHOXIDES = MaterialWrapper.of(() -> WerkstoffMaterialPool.BastnasiteRarerEarthOxides);
    public static final MaterialWrapper NITRATEDBASTNASITERAREREARTHOXIDES = MaterialWrapper.of(() -> WerkstoffMaterialPool.NitratedBastnasiteRarerEarthOxides);
    public static final MaterialWrapper SATURATEDBASTNASITERAREREARTHOXIDES = MaterialWrapper.of(() -> WerkstoffMaterialPool.SaturatedBastnasiteRarerEarthOxides);
    public static final MaterialWrapper SAMARICRAREEARTHCONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.SamaricRareEarthConcentrate);
    public static final MaterialWrapper NEODYMICRAREEARTHCONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.NeodymicRareEarthConcentrate);
    public static final MaterialWrapper LANTHANIUMCHLORIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.LanthaniumChloride);
    public static final MaterialWrapper NEODYMIUMOXIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.NeodymiumOxide);
    public static final MaterialWrapper FLUORINATEDSAMARICCONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.FluorinatedSamaricConcentrate);
    public static final MaterialWrapper CALCIUMFLUORIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.CalciumFluoride);
    public static final MaterialWrapper SAMARIUMTERBIUMMIXTURE = MaterialWrapper.of(() -> WerkstoffMaterialPool.SamariumTerbiumMixture);
    public static final MaterialWrapper NITRATEDSAMARIUMTERBIUMMIXTURE = MaterialWrapper.of(() -> WerkstoffMaterialPool.NitratedSamariumTerbiumMixture);
    public static final MaterialWrapper TERBIUMNITRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.TerbiumNitrate);
    public static final MaterialWrapper SAMARIUMORECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.SamariumOreConcentrate);
    public static final MaterialWrapper DEPHOSPHATEDSAMARIUMCONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.DephosphatedSamariumConcentrate);
    public static final MaterialWrapper TETRAHYDROFURAN = MaterialWrapper.of(() -> WerkstoffMaterialPool.Tetrahydrofuran);
    public static final MaterialWrapper BUTANEDIOL = MaterialWrapper.of(() -> WerkstoffMaterialPool.Butanediol);
    public static final MaterialWrapper ACIDICBUTANEDIOL = MaterialWrapper.of(() -> WerkstoffMaterialPool.AcidicButanediol);
    public static final MaterialWrapper MOTEOCATALYST = MaterialWrapper.of(() -> WerkstoffMaterialPool.MoTeOCatalyst);
    public static final MaterialWrapper TELLURIUMIVOXIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.TelluriumIVOxide);
    public static final MaterialWrapper MOLYBDENUMIVOXIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.MolybdenumIVOxide);
    public static final MaterialWrapper POLYTETRAHYDROFURAN = MaterialWrapper.of(() -> WerkstoffMaterialPool.Polytetrahydrofuran);
    public static final MaterialWrapper TUNGSTOPHOSPHORICACID = MaterialWrapper.of(() -> WerkstoffMaterialPool.TungstophosphoricAcid);
    public static final MaterialWrapper TOLUENEDIISOCYANATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.TolueneDiisocyanate);
    public static final MaterialWrapper DINITROTOLUENE = MaterialWrapper.of(() -> WerkstoffMaterialPool.Dinitrotoluene);
    public static final MaterialWrapper DIAMINOTOLUENE = MaterialWrapper.of(() -> WerkstoffMaterialPool.Diaminotoluene);
    public static final MaterialWrapper TOLUENETETRAMETHYLDIISOCYANATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.TolueneTetramethylDiisocyanate);
    public static final MaterialWrapper PTMEGELASTOMER = MaterialWrapper.of(() -> WerkstoffMaterialPool.PTMEGElastomer);
    public static final MaterialWrapper POTASSIUMCHLORATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.PotassiumChlorate);
    public static final MaterialWrapper DILUTEDACETONE = MaterialWrapper.of(() -> WerkstoffMaterialPool.DilutedAcetone);
    public static final MaterialWrapper MOLYBDENUMTRIOXIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.MolybdenumTrioxide);
    public static final MaterialWrapper MUDDYSAMARIUMRAREEARTHSOLUTION = MaterialWrapper.of(() -> WerkstoffMaterialPool.MuddySamariumRareEarthSolution);
    public static final MaterialWrapper SAMARIUMRAREEARTHMUD = MaterialWrapper.of(() -> WerkstoffMaterialPool.SamariumRareEarthMud);
    public static final MaterialWrapper DILUTEDSAMARIUMRAREEARTHSOLUTION = MaterialWrapper.of(() -> WerkstoffMaterialPool.DilutedSamariumRareEarthSolution);
    public static final MaterialWrapper SAMARIUMOXALATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.SamariumOxalate);
    public static final MaterialWrapper SAMARIUMCHLORIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.SamariumChloride);
    public static final MaterialWrapper SAMARIUMCHLORIDESODIUMCHLORIDEBLEND = MaterialWrapper.of(() -> WerkstoffMaterialPool.SamariumChlorideSodiumChlorideBlend);
    public static final MaterialWrapper IMPURELANTHANUMCHLORIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.ImpureLanthanumChloride);
    public static final MaterialWrapper SAMARIUMOXIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.SamariumOxide);
    public static final MaterialWrapper CHLORINATEDRAREEARTHCONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.ChlorinatedRareEarthConcentrate);
    public static final MaterialWrapper CHLORINATEDRAREEARTHENRICHEDSOLUTION = MaterialWrapper.of(() -> WerkstoffMaterialPool.ChlorinatedRareEarthEnrichedSolution);
    public static final MaterialWrapper CHLORINATEDRAREEARTHDILUTEDSOLUTION = MaterialWrapper.of(() -> WerkstoffMaterialPool.ChlorinatedRareEarthDilutedSolution);
    public static final MaterialWrapper RARESTEARTHRESIDUE = MaterialWrapper.of(() -> WerkstoffMaterialPool.RarestEarthResidue);
    public static final MaterialWrapper LANTHANUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.LanthanumExtractingNanoResin);
    public static final MaterialWrapper FILLEDLANTHANUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.FilledLanthanumExtractingNanoResin);
    public static final MaterialWrapper PRASEODYMIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.PraseodymiumExtractingNanoResin);
    public static final MaterialWrapper FILLEDPRASEODYMIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.FilledPraseodymiumExtractingNanoResin);
    public static final MaterialWrapper CERIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.CeriumExtractingNanoResin);
    public static final MaterialWrapper FILLEDCERIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.FilledCeriumExtractingNanoResin);
    public static final MaterialWrapper NEODYMIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.NeodymiumExtractingNanoResin);
    public static final MaterialWrapper FILLEDNEODYMIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.FilledNeodymiumExtractingNanoResin);
    public static final MaterialWrapper PROMETHIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.PromethiumExtractingNanoResin);
    public static final MaterialWrapper FILLEDPROMETHIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.FilledPromethiumExtractingNanoResin);
    public static final MaterialWrapper SAMARIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.SamariumExtractingNanoResin);
    public static final MaterialWrapper FILLEDSAMARIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.FilledSamariumExtractingNanoResin);
    public static final MaterialWrapper EUROPIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.EuropiumExtractingNanoResin);
    public static final MaterialWrapper FILLEDEUROPIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.FilledEuropiumExtractingNanoResin);
    public static final MaterialWrapper GADOLINIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.GadoliniumExtractingNanoResin);
    public static final MaterialWrapper FILLEDGADOLINIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.FilledGadoliniumExtractingNanoResin);
    public static final MaterialWrapper TERBIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.TerbiumExtractingNanoResin);
    public static final MaterialWrapper FILLEDTERBIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.FilledTerbiumExtractingNanoResin);
    public static final MaterialWrapper DYSPROSIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.DysprosiumExtractingNanoResin);
    public static final MaterialWrapper FILLEDDYSPROSIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.FilledDysprosiumExtractingNanoResin);
    public static final MaterialWrapper HOLMIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.HolmiumExtractingNanoResin);
    public static final MaterialWrapper FILLEDHOLMIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.FilledHolmiumExtractingNanoResin);
    public static final MaterialWrapper ERBIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.ErbiumExtractingNanoResin);
    public static final MaterialWrapper FILLEDERBIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.FilledErbiumExtractingNanoResin);
    public static final MaterialWrapper THULIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.ThuliumExtractingNanoResin);
    public static final MaterialWrapper FILLEDTHULIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.FilledThuliumExtractingNanoResin);
    public static final MaterialWrapper YTTERBIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.YtterbiumExtractingNanoResin);
    public static final MaterialWrapper FILLEDYTTERBIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.FilledYtterbiumExtractingNanoResin);
    public static final MaterialWrapper LUTETIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.LutetiumExtractingNanoResin);
    public static final MaterialWrapper FILLEDLUTETIUMEXTRACTINGNANORESIN = MaterialWrapper.of(() -> WerkstoffMaterialPool.FilledLutetiumExtractingNanoResin);
    public static final MaterialWrapper LANTHANUMCHLORIDECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.LanthanumChlorideConcentrate);
    public static final MaterialWrapper PRASEODYMIUMCHLORIDECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.PraseodymiumChlorideConcentrate);
    public static final MaterialWrapper CERIUMCHLORIDECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.CeriumChlorideConcentrate);
    public static final MaterialWrapper NEODYMIUMCHLORIDECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.NeodymiumChlorideConcentrate);
    public static final MaterialWrapper PROMETHIUMCHLORIDECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.PromethiumChlorideConcentrate);
    public static final MaterialWrapper SAMARIUMCHLORIDECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.SamariumChlorideConcentrate);
    public static final MaterialWrapper EUROPIUMCHLORIDECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.EuropiumChlorideConcentrate);
    public static final MaterialWrapper GADOLINIUMCHLORIDECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.GadoliniumChlorideConcentrate);
    public static final MaterialWrapper TERBIUMCHLORIDECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.TerbiumChlorideConcentrate);
    public static final MaterialWrapper DYSPROSIUMCHLORIDECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.DysprosiumChlorideConcentrate);
    public static final MaterialWrapper HOLMIUMCHLORIDECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.HolmiumChlorideConcentrate);
    public static final MaterialWrapper ERBIUMCHLORIDECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.ErbiumChlorideConcentrate);
    public static final MaterialWrapper THULIUMCHLORIDECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.ThuliumChlorideConcentrate);
    public static final MaterialWrapper YTTERBIUMCHLORIDECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.YtterbiumChlorideConcentrate);
    public static final MaterialWrapper LUTETIUMCHLORIDECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.LutetiumChlorideConcentrate);
    public static final MaterialWrapper LANTHANUMORECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.LanthanumOreConcentrate);
    public static final MaterialWrapper PRASEODYMIUMORECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.PraseodymiumOreConcentrate);
    public static final MaterialWrapper CERIUMORECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.CeriumOreConcentrate);
    public static final MaterialWrapper NEODYMIUMORECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.NeodymiumOreConcentrate);
    public static final MaterialWrapper PROMETHIUMORECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.PromethiumOreConcentrate);
    public static final MaterialWrapper EUROPIUMORECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.EuropiumOreConcentrate);
    public static final MaterialWrapper GADOLINIUMORECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.GadoliniumOreConcentrate);
    public static final MaterialWrapper TERBIUMORECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.TerbiumOreConcentrate);
    public static final MaterialWrapper DYSPROSIUMORECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.DysprosiumOreConcentrate);
    public static final MaterialWrapper HOLMIUMORECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.HolmiumOreConcentrate);
    public static final MaterialWrapper ERBIUMORECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.ErbiumOreConcentrate);
    public static final MaterialWrapper THULIUMORECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.ThuliumOreConcentrate);
    public static final MaterialWrapper YTTERBIUMORECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.YtterbiumOreConcentrate);
    public static final MaterialWrapper LUTETIUMORECONCENTRATE = MaterialWrapper.of(() -> WerkstoffMaterialPool.LutetiumOreConcentrate);
    public static final MaterialWrapper CERIUMDOPEDLUTETIUMALUMINIUMOXYGENBLEND = MaterialWrapper.of(() -> WerkstoffMaterialPool.CeriumDopedLutetiumAluminiumOxygenBlend);
    public static final MaterialWrapper CERIUMDOPEDLUTETIUMALUMINIUMGARNET = MaterialWrapper.of(() -> WerkstoffMaterialPool.CeriumDopedLutetiumAluminiumGarnet);
    public static final MaterialWrapper PERMALLOY = MaterialWrapper.of(() -> WerkstoffMaterialPool.Permalloy);
    public static final MaterialWrapper MUMETAL = MaterialWrapper.of(() -> WerkstoffMaterialPool.MuMetal);
    public static final MaterialWrapper THORIUM234 = MaterialWrapper.of(() -> WerkstoffMaterialPool.Thorium234);
    public static final MaterialWrapper SILICONNITRIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.SiliconNitride);
    public static final MaterialWrapper FLUOROFORM = MaterialWrapper.of(() -> WerkstoffMaterialPool.Fluoroform);
    public static final MaterialWrapper FLUOROFORMOXYGENMIX = MaterialWrapper.of(() -> WerkstoffMaterialPool.FluoroformOxygenMix);
    public static final MaterialWrapper BORONTRIOXIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.BoronTrioxide);
    public static final MaterialWrapper BORONTRICHLORIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.BoronTrichloride);
    public static final MaterialWrapper LANTHANUMHEXABORIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.LanthanumHexaboride);
    public static final MaterialWrapper LANTHANUMOXIDE = MaterialWrapper.of(() -> WerkstoffMaterialPool.LanthanumOxide);
    public static final MaterialWrapper NITROGENPLASMASILANEMIX = MaterialWrapper.of(() -> WerkstoffMaterialPool.NitrogenPlasmaSilaneMix);
    public static final MaterialWrapper HOTSUPERCOOLANT = MaterialWrapper.of(() -> WerkstoffMaterialPool.HotSuperCoolant);
    //#endregion

    //#region src/main/java/goodgenerator/items/GGMaterial.java
    public static final MaterialWrapper GRAPHITEURANIUMMIXTURE = MaterialWrapper.of(() -> GGMaterial.graphiteUraniumMixture);
    public static final MaterialWrapper URANIUMBASEDLIQUIDFUEL = MaterialWrapper.of(() -> GGMaterial.uraniumBasedLiquidFuel);
    public static final MaterialWrapper URANIUMBASEDLIQUIDFUELEXCITED = MaterialWrapper.of(() -> GGMaterial.uraniumBasedLiquidFuelExcited);
    public static final MaterialWrapper URANIUMBASEDLIQUIDFUELDEPLETED = MaterialWrapper.of(() -> GGMaterial.uraniumBasedLiquidFuelDepleted);
    public static final MaterialWrapper URANIUMCARBIDETHORIUMMIXTURE = MaterialWrapper.of(() -> GGMaterial.uraniumCarbideThoriumMixture);
    public static final MaterialWrapper THORIUMBASEDLIQUIDFUEL = MaterialWrapper.of(() -> GGMaterial.thoriumBasedLiquidFuel);
    public static final MaterialWrapper THORIUMBASEDLIQUIDFUELEXCITED = MaterialWrapper.of(() -> GGMaterial.thoriumBasedLiquidFuelExcited);
    public static final MaterialWrapper THORIUMBASEDLIQUIDFUELDEPLETED = MaterialWrapper.of(() -> GGMaterial.thoriumBasedLiquidFuelDepleted);
    public static final MaterialWrapper PLUTONIUMOXIDEURANIUMMIXTURE = MaterialWrapper.of(() -> GGMaterial.plutoniumOxideUraniumMixture);
    public static final MaterialWrapper PLUTONIUMBASEDLIQUIDFUEL = MaterialWrapper.of(() -> GGMaterial.plutoniumBasedLiquidFuel);
    public static final MaterialWrapper PLUTONIUMBASEDLIQUIDFUELEXCITED = MaterialWrapper.of(() -> GGMaterial.plutoniumBasedLiquidFuelExcited);
    public static final MaterialWrapper PLUTONIUMBASEDLIQUIDFUELDEPLETED = MaterialWrapper.of(() -> GGMaterial.plutoniumBasedLiquidFuelDepleted);
    public static final MaterialWrapper OXALATE = MaterialWrapper.of(() -> GGMaterial.oxalate);
    public static final MaterialWrapper VANADIUMPENTOXIDE = MaterialWrapper.of(() -> GGMaterial.vanadiumPentoxide);
    public static final MaterialWrapper THORIUMNITRATE = MaterialWrapper.of(() -> GGMaterial.thoriumNitrate);
    public static final MaterialWrapper THORIUMOXALATE = MaterialWrapper.of(() -> GGMaterial.thoriumOxalate);
    public static final MaterialWrapper THORIUMHYDROXIDE = MaterialWrapper.of(() -> GGMaterial.thoriumHydroxide);
    public static final MaterialWrapper SODIUMOXALATE = MaterialWrapper.of(() -> GGMaterial.sodiumOxalate);
    public static final MaterialWrapper THORIUMTETRACHLORIDE = MaterialWrapper.of(() -> GGMaterial.thoriumTetrachloride);
    public static final MaterialWrapper THORIUMTETRAFLUORIDE = MaterialWrapper.of(() -> GGMaterial.thoriumTetrafluoride);
    public static final MaterialWrapper THORIUM232TETRAFLUORIDE = MaterialWrapper.of(() -> GGMaterial.thorium232Tetrafluoride);
    public static final MaterialWrapper ORUNDUM = MaterialWrapper.of(() -> GGMaterial.orundum);
    public static final MaterialWrapper ATOMICSEPARATIONCATALYST = MaterialWrapper.of(() -> GGMaterial.atomicSeparationCatalyst);
    public static final MaterialWrapper EXTREMELYUNSTABLENAQUADAH = MaterialWrapper.of(() -> GGMaterial.extremelyUnstableNaquadah);
    public static final MaterialWrapper LIGHTNAQUADAHFUEL = MaterialWrapper.of(() -> GGMaterial.lightNaquadahFuel);
    public static final MaterialWrapper HEAVYNAQUADAHFUEL = MaterialWrapper.of(() -> GGMaterial.heavyNaquadahFuel);
    public static final MaterialWrapper NAQUADAHGAS = MaterialWrapper.of(() -> GGMaterial.naquadahGas);
    public static final MaterialWrapper NAQUADAHASPHALT = MaterialWrapper.of(() -> GGMaterial.naquadahAsphalt);
    public static final MaterialWrapper ETHER = MaterialWrapper.of(() -> GGMaterial.ether);
    public static final MaterialWrapper ANTIMONYTRICHLORIDE = MaterialWrapper.of(() -> GGMaterial.antimonyTrichloride);
    public static final MaterialWrapper ANTIMONYPENTACHLORIDESOLUTION = MaterialWrapper.of(() -> GGMaterial.antimonyPentachlorideSolution);
    public static final MaterialWrapper ANTIMONYPENTACHLORIDE = MaterialWrapper.of(() -> GGMaterial.antimonyPentachloride);
    public static final MaterialWrapper ANTIMONYPENTAFLUORIDE = MaterialWrapper.of(() -> GGMaterial.antimonyPentafluoride);
    public static final MaterialWrapper FLUOROANTIMONICACID = MaterialWrapper.of(() -> GGMaterial.fluoroantimonicAcid);
    public static final MaterialWrapper RADIOACTIVESLUDGE = MaterialWrapper.of(() -> GGMaterial.radioactiveSludge);
    public static final MaterialWrapper ACIDNAQUADAHEMULSION = MaterialWrapper.of(() -> GGMaterial.acidNaquadahEmulsion);
    public static final MaterialWrapper NAQUADAHEMULSION = MaterialWrapper.of(() -> GGMaterial.naquadahEmulsion);
    public static final MaterialWrapper NAQUADAHSOLUTION = MaterialWrapper.of(() -> GGMaterial.naquadahSolution);
    public static final MaterialWrapper NAQUADAHBASEDFUELMKI = MaterialWrapper.of(() -> GGMaterial.naquadahBasedFuelMkI);
    public static final MaterialWrapper NAQUADAHBASEDFUELMKIDEPLETED = MaterialWrapper.of(() -> GGMaterial.naquadahBasedFuelMkIDepleted);
    public static final MaterialWrapper NAQUADAHBASEDFUELMKII = MaterialWrapper.of(() -> GGMaterial.naquadahBasedFuelMkII);
    public static final MaterialWrapper NAQUADAHBASEDFUELMKIIDEPLETED = MaterialWrapper.of(() -> GGMaterial.naquadahBasedFuelMkIIDepleted);
    public static final MaterialWrapper NAQUADAHBASEDFUELMKIII = MaterialWrapper.of(() -> GGMaterial.naquadahBasedFuelMkIII);
    public static final MaterialWrapper NAQUADAHBASEDFUELMKIIIDEPLETED = MaterialWrapper.of(() -> GGMaterial.naquadahBasedFuelMkIIIDepleted);
    public static final MaterialWrapper NAQUADAHBASEDFUELMKIV = MaterialWrapper.of(() -> GGMaterial.naquadahBasedFuelMkIV);
    public static final MaterialWrapper NAQUADAHBASEDFUELMKIVDEPLETED = MaterialWrapper.of(() -> GGMaterial.naquadahBasedFuelMkIVDepleted);
    public static final MaterialWrapper NAQUADAHBASEDFUELMKV = MaterialWrapper.of(() -> GGMaterial.naquadahBasedFuelMkV);
    public static final MaterialWrapper NAQUADAHBASEDFUELMKVDEPLETED = MaterialWrapper.of(() -> GGMaterial.naquadahBasedFuelMkVDepleted);
    public static final MaterialWrapper NAQUADAHBASEDFUELMKVI = MaterialWrapper.of(() -> GGMaterial.naquadahBasedFuelMkVI);
    public static final MaterialWrapper NAQUADAHBASEDFUELMKVIDEPLETED = MaterialWrapper.of(() -> GGMaterial.naquadahBasedFuelMkVIDepleted);
    public static final MaterialWrapper ZINCCHLORIDE = MaterialWrapper.of(() -> GGMaterial.zincChloride);
    public static final MaterialWrapper ZINCTHORIUMALLOY = MaterialWrapper.of(() -> GGMaterial.zincThoriumAlloy);
    public static final MaterialWrapper NAQUADAHEARTH = MaterialWrapper.of(() -> GGMaterial.naquadahEarth);
    public static final MaterialWrapper TITANIUMTRIFLUORIDE = MaterialWrapper.of(() -> GGMaterial.titaniumTrifluoride);
    public static final MaterialWrapper LOWQUALITYNAQUADAHEMULSION = MaterialWrapper.of(() -> GGMaterial.lowQualityNaquadahEmulsion);
    public static final MaterialWrapper GALLIUMHYDROXIDE = MaterialWrapper.of(() -> GGMaterial.galliumHydroxide);
    public static final MaterialWrapper LOWQUALITYNAQUADAHSOLUTION = MaterialWrapper.of(() -> GGMaterial.lowQualityNaquadahSolution);
    public static final MaterialWrapper TOWETHYL1HEXANOL = MaterialWrapper.of(() -> GGMaterial.towEthyl1Hexanol);
    public static final MaterialWrapper P507 = MaterialWrapper.of(() -> GGMaterial.P507);
    public static final MaterialWrapper NAQUADAHADAMANTIUMSOLUTION = MaterialWrapper.of(() -> GGMaterial.naquadahAdamantiumSolution);
    public static final MaterialWrapper NAQUADAHRICHSOLUTION = MaterialWrapper.of(() -> GGMaterial.naquadahRichSolution);
    public static final MaterialWrapper NAQUADAHINE = MaterialWrapper.of(() -> GGMaterial.naquadahine);
    public static final MaterialWrapper FLUORINERICHWASTELIQUID = MaterialWrapper.of(() -> GGMaterial.fluorineRichWasteLiquid);
    public static final MaterialWrapper WASTELIQUID = MaterialWrapper.of(() -> GGMaterial.wasteLiquid);
    public static final MaterialWrapper ADAMANTINE = MaterialWrapper.of(() -> GGMaterial.adamantine);
    public static final MaterialWrapper ENRICHEDNAQUADAHEARTH = MaterialWrapper.of(() -> GGMaterial.enrichedNaquadahEarth);
    public static final MaterialWrapper TRINIUMSULPHATE = MaterialWrapper.of(() -> GGMaterial.triniumSulphate);
    public static final MaterialWrapper ENRICHEDNAQUADAHRICHSOLUTION = MaterialWrapper.of(() -> GGMaterial.enrichedNaquadahRichSolution);
    public static final MaterialWrapper CONCENTRATEDENRICHEDNAQUADAHSLUDGE = MaterialWrapper.of(() -> GGMaterial.concentratedEnrichedNaquadahSludge);
    public static final MaterialWrapper ENRICHEDNAQUADAHSULPHATE = MaterialWrapper.of(() -> GGMaterial.enrichedNaquadahSulphate);
    public static final MaterialWrapper NAQUADRIAEARTH = MaterialWrapper.of(() -> GGMaterial.naquadriaEarth);
    public static final MaterialWrapper INDIUMPHOSPHATE = MaterialWrapper.of(() -> GGMaterial.indiumPhosphate);
    public static final MaterialWrapper LOWQUALITYNAQUADRIAPHOSPHATE = MaterialWrapper.of(() -> GGMaterial.lowQualityNaquadriaPhosphate);
    public static final MaterialWrapper NAQUADRIARICHSOLUTION = MaterialWrapper.of(() -> GGMaterial.naquadriaRichSolution);
    public static final MaterialWrapper LOWQUALITYNAQUADRIASULPHATE = MaterialWrapper.of(() -> GGMaterial.lowQualityNaquadriaSulphate);
    public static final MaterialWrapper LOWQUALITYNAQUADRIASOLUTION = MaterialWrapper.of(() -> GGMaterial.lowQualityNaquadriaSolution);
    public static final MaterialWrapper NAQUADRIASULPHATE = MaterialWrapper.of(() -> GGMaterial.naquadriaSulphate);
    public static final MaterialWrapper NAQUADAHGOO = MaterialWrapper.of(() -> GGMaterial.naquadahGoo);
    public static final MaterialWrapper ENRICHEDNAQUADAHGOO = MaterialWrapper.of(() -> GGMaterial.enrichedNaquadahGoo);
    public static final MaterialWrapper NAQUADRIAGOO = MaterialWrapper.of(() -> GGMaterial.naquadriaGoo);
    public static final MaterialWrapper ZIRCALOY4 = MaterialWrapper.of(() -> GGMaterial.zircaloy4);
    public static final MaterialWrapper ZIRCALOY2 = MaterialWrapper.of(() -> GGMaterial.zircaloy2);
    public static final MaterialWrapper INCOLOY903 = MaterialWrapper.of(() -> GGMaterial.incoloy903);
    public static final MaterialWrapper ADAMANTIUMALLOY = MaterialWrapper.of(() -> GGMaterial.adamantiumAlloy);
    public static final MaterialWrapper ETHANOLGASOLINE = MaterialWrapper.of(() -> GGMaterial.ethanolGasoline);
    public static final MaterialWrapper CYCLOPENTADIENE = MaterialWrapper.of(() -> GGMaterial.cyclopentadiene);
    public static final MaterialWrapper FERROUSCHLORIDE = MaterialWrapper.of(() -> GGMaterial.ferrousChloride);
    public static final MaterialWrapper DIETHYLAMINE = MaterialWrapper.of(() -> GGMaterial.diethylamine);
    public static final MaterialWrapper IMPUREFERROCENEMIXTURE = MaterialWrapper.of(() -> GGMaterial.impureFerroceneMixture);
    public static final MaterialWrapper FERROCENESOLUTION = MaterialWrapper.of(() -> GGMaterial.ferroceneSolution);
    public static final MaterialWrapper FERROCENEWASTE = MaterialWrapper.of(() -> GGMaterial.ferroceneWaste);
    public static final MaterialWrapper FERROCENE = MaterialWrapper.of(() -> GGMaterial.ferrocene);
    public static final MaterialWrapper IRONEDKEROSENE = MaterialWrapper.of(() -> GGMaterial.ironedKerosene);
    public static final MaterialWrapper IRONEDFUEL = MaterialWrapper.of(() -> GGMaterial.ironedFuel);
    public static final MaterialWrapper MARM200 = MaterialWrapper.of(() -> GGMaterial.marM200);
    public static final MaterialWrapper MARCEM200 = MaterialWrapper.of(() -> GGMaterial.marCeM200);
    public static final MaterialWrapper LITHIUMCHLORIDE = MaterialWrapper.of(() -> GGMaterial.lithiumChloride);
    public static final MaterialWrapper SIGNALIUM = MaterialWrapper.of(() -> GGMaterial.signalium);
    public static final MaterialWrapper LUMIINESSENCE = MaterialWrapper.of(() -> GGMaterial.lumiinessence);
    public static final MaterialWrapper LUMIIUM = MaterialWrapper.of(() -> GGMaterial.lumiium);
    public static final MaterialWrapper ARTHERIUMSN = MaterialWrapper.of(() -> GGMaterial.artheriumSn);
    public static final MaterialWrapper TITANIUMBETAC = MaterialWrapper.of(() -> GGMaterial.titaniumBetaC);
    public static final MaterialWrapper DALISENITE = MaterialWrapper.of(() -> GGMaterial.dalisenite);
    public static final MaterialWrapper HIKARIUM = MaterialWrapper.of(() -> GGMaterial.hikarium);
    public static final MaterialWrapper TAIRITSU = MaterialWrapper.of(() -> GGMaterial.tairitsu);
    public static final MaterialWrapper ANTIMONYPENTAFLUORIDESOLUTION = MaterialWrapper.of(() -> GGMaterial.antimonyPentafluorideSolution);
    public static final MaterialWrapper MAGNESIUMSULPHATE = MaterialWrapper.of(() -> GGMaterial.magnesiumSulphate);
    public static final MaterialWrapper PRECIOUSMETALALLOY = MaterialWrapper.of(() -> GGMaterial.preciousMetalAlloy);
    public static final MaterialWrapper ENRICHEDNAQUADAHALLOY = MaterialWrapper.of(() -> GGMaterial.enrichedNaquadahAlloy);
    public static final MaterialWrapper METASTABLEOGANESSON = MaterialWrapper.of(() -> GGMaterial.metastableOganesson);
    public static final MaterialWrapper SHIRABON = MaterialWrapper.of(() -> GGMaterial.shirabon);
    public static final MaterialWrapper INERTNAQUADAH = MaterialWrapper.of(() -> GGMaterial.inertNaquadah);
    public static final MaterialWrapper INERTENRICHEDNAQUADAH = MaterialWrapper.of(() -> GGMaterial.inertEnrichedNaquadah);
    public static final MaterialWrapper INERTNAQUADRIA = MaterialWrapper.of(() -> GGMaterial.inertNaquadria);
    //#endregion

    //#region src/main/java/gtnhlanth/common/register/BotWerkstoffMaterialPool.java
    public static final MaterialWrapper TUNGSTICACID = MaterialWrapper.of(() -> BotWerkstoffMaterialPool.TungsticAcid);
    public static final MaterialWrapper TUNGSTENTRIOXIDE = MaterialWrapper.of(() -> BotWerkstoffMaterialPool.TungstenTrioxide);
    public static final MaterialWrapper SODIUMTUNGSTATE = MaterialWrapper.of(() -> BotWerkstoffMaterialPool.SodiumTungstate);
    public static final MaterialWrapper PHOSGENE = MaterialWrapper.of(() -> BotWerkstoffMaterialPool.Phosgene);
    public static final MaterialWrapper NITROMETHANE = MaterialWrapper.of(() -> BotWerkstoffMaterialPool.Nitromethane);
    //#endregion

    //#region src/main/java/com/recursive_pineapple/nuclear_horizons/reactors/items/material/MaterialsNuclear.java
    public static final MaterialWrapper NATURAL_URANIUM = MaterialWrapper.of(() -> MaterialsNuclear.NATURAL_URANIUM);
    public static final MaterialWrapper NATURAL_URANIUM_TETRAFLUORIDE = MaterialWrapper.of(() -> MaterialsNuclear.NATURAL_URANIUM_TETRAFLUORIDE);
    public static final MaterialWrapper NATURAL_URANIUM_HEXAFLUORIDE = MaterialWrapper.of(() -> MaterialsNuclear.NATURAL_URANIUM_HEXAFLUORIDE);
    public static final MaterialWrapper DEPLETED_URANIUM_HEXAFLUORIDE = MaterialWrapper.of(() -> MaterialsNuclear.DEPLETED_URANIUM_HEXAFLUORIDE);
    public static final MaterialWrapper ENRICHED_URANIUM_HEXAFLUORIDE = MaterialWrapper.of(() -> MaterialsNuclear.ENRICHED_URANIUM_HEXAFLUORIDE);
    public static final MaterialWrapper ENRICHED_URANIUM_FUEL = MaterialWrapper.of(() -> MaterialsNuclear.ENRICHED_URANIUM_FUEL);
    public static final MaterialWrapper ENRICHED_THORIUM_FUEL = MaterialWrapper.of(() -> MaterialsNuclear.ENRICHED_THORIUM_FUEL);
    public static final MaterialWrapper ENRICHED_MOX_FUEL = MaterialWrapper.of(() -> MaterialsNuclear.ENRICHED_MOX_FUEL);
    public static final MaterialWrapper DEPLETED_URANIUM_FUEL = MaterialWrapper.of(() -> MaterialsNuclear.DEPLETED_URANIUM_FUEL);
    public static final MaterialWrapper DEPLETED_THORIUM_FUEL = MaterialWrapper.of(() -> MaterialsNuclear.DEPLETED_THORIUM_FUEL);
    public static final MaterialWrapper DEPLETED_MOX_FUEL = MaterialWrapper.of(() -> MaterialsNuclear.DEPLETED_MOX_FUEL);
    public static final MaterialWrapper DEPLETED_URANIUM_FUEL_SOLUTION = MaterialWrapper.of(() -> MaterialsNuclear.DEPLETED_URANIUM_FUEL_SOLUTION);
    public static final MaterialWrapper DEPLETED_THORIUM_FUEL_SOLUTION = MaterialWrapper.of(() -> MaterialsNuclear.DEPLETED_THORIUM_FUEL_SOLUTION);
    public static final MaterialWrapper DEPLETED_MOX_FUEL_SOLUTION = MaterialWrapper.of(() -> MaterialsNuclear.DEPLETED_MOX_FUEL_SOLUTION);
    public static final MaterialWrapper PU_SOLUTION_AQ_PHASE = MaterialWrapper.of(() -> MaterialsNuclear.PU_SOLUTION_AQ_PHASE);
    public static final MaterialWrapper U_SOLUTION_ORG_PHASE = MaterialWrapper.of(() -> MaterialsNuclear.U_SOLUTION_ORG_PHASE);
    public static final MaterialWrapper U238_MIBK_SOLUTION = MaterialWrapper.of(() -> MaterialsNuclear.U238_MIBK_SOLUTION);
    public static final MaterialWrapper U238_WATER_SOLUTION = MaterialWrapper.of(() -> MaterialsNuclear.U238_WATER_SOLUTION);
    public static final MaterialWrapper U235_SOLUTION = MaterialWrapper.of(() -> MaterialsNuclear.U235_SOLUTION);
    public static final MaterialWrapper MIXED_PU_SOLIDS = MaterialWrapper.of(() -> MaterialsNuclear.MIXED_PU_SOLIDS);
    public static final MaterialWrapper PU239_MIBK_SOLUTION = MaterialWrapper.of(() -> MaterialsNuclear.PU239_MIBK_SOLUTION);
    public static final MaterialWrapper PU239_WATER_SOLUTION = MaterialWrapper.of(() -> MaterialsNuclear.PU239_WATER_SOLUTION);
    public static final MaterialWrapper PU241_SOLUTION = MaterialWrapper.of(() -> MaterialsNuclear.PU241_SOLUTION);
    public static final MaterialWrapper TH_SOLUTION_AQ_PHASE = MaterialWrapper.of(() -> MaterialsNuclear.TH_SOLUTION_AQ_PHASE);
    public static final MaterialWrapper URANIUM233_SOLUTION_ORG_PHASE = MaterialWrapper.of(() -> MaterialsNuclear.URANIUM233_SOLUTION_ORG_PHASE);
    public static final MaterialWrapper PLUTONYL_239_NITRATE = MaterialWrapper.of(() -> MaterialsNuclear.PLUTONYL_239_NITRATE);
    public static final MaterialWrapper PLUTONYL_241_NITRATE = MaterialWrapper.of(() -> MaterialsNuclear.PLUTONYL_241_NITRATE);
    public static final MaterialWrapper URANYL_233_NITRATE = MaterialWrapper.of(() -> MaterialsNuclear.URANYL_233_NITRATE);
    public static final MaterialWrapper URANYL_235_NITRATE = MaterialWrapper.of(() -> MaterialsNuclear.URANYL_235_NITRATE);
    public static final MaterialWrapper URANYL_238_NITRATE = MaterialWrapper.of(() -> MaterialsNuclear.URANYL_238_NITRATE);
    public static final MaterialWrapper URANIUM_233_DIOXIDE = MaterialWrapper.of(() -> MaterialsNuclear.URANIUM_233_DIOXIDE);
    public static final MaterialWrapper URANIUM_235_DIOXIDE = MaterialWrapper.of(() -> MaterialsNuclear.URANIUM_235_DIOXIDE);
    public static final MaterialWrapper URANIUM_238_DIOXIDE = MaterialWrapper.of(() -> MaterialsNuclear.URANIUM_238_DIOXIDE);
    public static final MaterialWrapper REFINED_THORIUM = MaterialWrapper.of(() -> MaterialsNuclear.REFINED_THORIUM);
    public static final MaterialWrapper THORIANITE_AQ_SOLUTION = MaterialWrapper.of(() -> MaterialsNuclear.THORIANITE_AQ_SOLUTION);
    public static final MaterialWrapper LOW_URANIUM_SLUDGE = MaterialWrapper.of(() -> MaterialsNuclear.LOW_URANIUM_SLUDGE);
    public static final MaterialWrapper THORIUM_NITRATE_SOLUTION = MaterialWrapper.of(() -> MaterialsNuclear.THORIUM_NITRATE_SOLUTION);
    public static final MaterialWrapper POOR_URANIUM_MIXTURE = MaterialWrapper.of(() -> MaterialsNuclear.POOR_URANIUM_MIXTURE);
    //#endregion

    //#region src/main/java/com/recursive_pineapple/nuclear_horizons/reactors/items/material/MaterialsChemical.java
    public static final MaterialWrapper TRIBUTYL_PHOSPHATE = MaterialWrapper.of(() -> MaterialsChemical.TRIBUTYL_PHOSPHATE);
    public static final MaterialWrapper PHOSPHORYL_CHLORIDE = MaterialWrapper.of(() -> MaterialsChemical.PHOSPHORYL_CHLORIDE);
    public static final MaterialWrapper DILUTED_NITRIC_ACID = MaterialWrapper.of(() -> MaterialsChemical.DILUTED_NITRIC_ACID);
    public static final MaterialWrapper ZINC_NITRATE_SOLUTION = MaterialWrapper.of(() -> MaterialsChemical.ZINC_NITRATE_SOLUTION);
    public static final MaterialWrapper ZINC_NITRATE = MaterialWrapper.of(() -> MaterialsChemical.ZINC_NITRATE);
    public static final MaterialWrapper METYHL_MAGNESIUM_BROMIDE = MaterialWrapper.of(() -> MaterialsChemical.METYHL_MAGNESIUM_BROMIDE);
    public static final MaterialWrapper METHYL_ISOBUTYL_KETONE = MaterialWrapper.of(() -> MaterialsChemical.METHYL_ISOBUTYL_KETONE);
    public static final MaterialWrapper HOT_LITHIUM_TETRAFLUOROBERYLLATE = MaterialWrapper.of(() -> MaterialsChemical.HOT_LITHIUM_TETRAFLUOROBERYLLATE);
    public static final MaterialWrapper AMERICIUM_III_OXIDE = MaterialWrapper.of(() -> MaterialsChemical.AMERICIUM_III_OXIDE);
    public static final MaterialWrapper AMERICIUM_IV_OXIDE = MaterialWrapper.of(() -> MaterialsChemical.AMERICIUM_IV_OXIDE);
    public static final MaterialWrapper CURIUM_III_OXIDE = MaterialWrapper.of(() -> MaterialsChemical.CURIUM_III_OXIDE);
    public static final MaterialWrapper CURIUM_IV_OXIDE = MaterialWrapper.of(() -> MaterialsChemical.CURIUM_IV_OXIDE);
    public static final MaterialWrapper CALIFORNIUM_III_OXIDE = MaterialWrapper.of(() -> MaterialsChemical.CALIFORNIUM_III_OXIDE);
    public static final MaterialWrapper CALIFORNIUM_IV_OXIDE = MaterialWrapper.of(() -> MaterialsChemical.CALIFORNIUM_IV_OXIDE);
    public static final MaterialWrapper URANIUM_FISSION_PRODUCT_MIXTURE = MaterialWrapper.of(() -> MaterialsChemical.URANIUM_FISSION_PRODUCT_MIXTURE);
    public static final MaterialWrapper PLUTONIUM_FISSION_PRODUCT_MIXTURE = MaterialWrapper.of(() -> MaterialsChemical.PLUTONIUM_FISSION_PRODUCT_MIXTURE);
    public static final MaterialWrapper THORIUM_FISSION_PRODUCT_MIXTURE = MaterialWrapper.of(() -> MaterialsChemical.THORIUM_FISSION_PRODUCT_MIXTURE);
    public static final MaterialWrapper TRANSURANIC_WASTE_MIXTURE = MaterialWrapper.of(() -> MaterialsChemical.TRANSURANIC_WASTE_MIXTURE);
    public static final MaterialWrapper LANTHANUM_II_OXIDE = MaterialWrapper.of(() -> MaterialsChemical.LANTHANUM_II_OXIDE);
    public static final MaterialWrapper LANTHANIDE_WASTE_MIXTURE = MaterialWrapper.of(() -> MaterialsChemical.LANTHANIDE_WASTE_MIXTURE);
    //#endregion

    //#region src/main/java/gtPlusPlus/core/material/MaterialMisc.java
    public static final MaterialWrapper POTASSIUM_NITRATE = MaterialWrapper.of(() -> MaterialMisc.POTASSIUM_NITRATE);
    public static final MaterialWrapper SODIUM_NITRATE = MaterialWrapper.of(() -> MaterialMisc.SODIUM_NITRATE);
    public static final MaterialWrapper SOLAR_SALT_COLD = MaterialWrapper.of(() -> MaterialMisc.SOLAR_SALT_COLD);
    public static final MaterialWrapper SOLAR_SALT_HOT = MaterialWrapper.of(() -> MaterialMisc.SOLAR_SALT_HOT);
    public static final MaterialWrapper STRONTIUM_OXIDE = MaterialWrapper.of(() -> MaterialMisc.STRONTIUM_OXIDE);
    public static final MaterialWrapper SELENIUM_DIOXIDE = MaterialWrapper.of(() -> MaterialMisc.SELENIUM_DIOXIDE);
    public static final MaterialWrapper SELENIOUS_ACID = MaterialWrapper.of(() -> MaterialMisc.SELENIOUS_ACID);
    public static final MaterialWrapper HYDROGEN_CYANIDE = MaterialWrapper.of(() -> MaterialMisc.HYDROGEN_CYANIDE);
    public static final MaterialWrapper CARBON_MONOXIDE = MaterialWrapper.of(() -> MaterialMisc.CARBON_MONOXIDE);
    public static final MaterialWrapper CARBON_DIOXIDE = MaterialWrapper.of(() -> MaterialMisc.CARBON_DIOXIDE);
    public static final MaterialWrapper WOODS_GLASS = MaterialWrapper.of(() -> MaterialMisc.WOODS_GLASS);
    public static final MaterialWrapper RARE_EARTH_LOW = MaterialWrapper.of(() -> MaterialMisc.RARE_EARTH_LOW);
    public static final MaterialWrapper RARE_EARTH_MID = MaterialWrapper.of(() -> MaterialMisc.RARE_EARTH_MID);
    public static final MaterialWrapper RARE_EARTH_HIGH = MaterialWrapper.of(() -> MaterialMisc.RARE_EARTH_HIGH);
    public static final MaterialWrapper HYDROXIDE = MaterialWrapper.of(() -> MaterialMisc.HYDROXIDE);
    public static final MaterialWrapper HYDROGEN_CHLORIDE = MaterialWrapper.of(() -> MaterialMisc.HYDROGEN_CHLORIDE);
    public static final MaterialWrapper HYDROGEN_CHLORIDE_MIX = MaterialWrapper.of(() -> MaterialMisc.HYDROGEN_CHLORIDE_MIX);
    public static final MaterialWrapper SODIUM_CHLORIDE = MaterialWrapper.of(() -> MaterialMisc.SODIUM_CHLORIDE);
    public static final MaterialWrapper SALT_WATER = MaterialWrapper.of(() -> MaterialMisc.SALT_WATER);
    public static final MaterialWrapper BRINE = MaterialWrapper.of(() -> MaterialMisc.BRINE);
    public static final MaterialWrapper STRONTIUM_HYDROXIDE = MaterialWrapper.of(() -> MaterialMisc.STRONTIUM_HYDROXIDE);
    public static final MaterialWrapper ACETIC_ANHYDRIDE = MaterialWrapper.of(() -> MaterialMisc.ACETIC_ANHYDRIDE);
    public static final MaterialWrapper CHLOROACETIC_ACID = MaterialWrapper.of(() -> MaterialMisc.CHLOROACETIC_ACID);
    public static final MaterialWrapper DICHLOROACETIC_ACID = MaterialWrapper.of(() -> MaterialMisc.DICHLOROACETIC_ACID);
    public static final MaterialWrapper TRICHLOROACETIC_ACID = MaterialWrapper.of(() -> MaterialMisc.TRICHLOROACETIC_ACID);
    public static final MaterialWrapper CHLOROACETIC_MIXTURE = MaterialWrapper.of(() -> MaterialMisc.CHLOROACETIC_MIXTURE);
    public static final MaterialWrapper SODIUM_CYANIDE = MaterialWrapper.of(() -> MaterialMisc.SODIUM_CYANIDE);
    public static final MaterialWrapper CYANOACETIC_ACID = MaterialWrapper.of(() -> MaterialMisc.CYANOACETIC_ACID);
    public static final MaterialWrapper SOLID_ACID_MIXTURE = MaterialWrapper.of(() -> MaterialMisc.SOLID_ACID_MIXTURE);
    public static final MaterialWrapper COPPER_SULFATE = MaterialWrapper.of(() -> MaterialMisc.COPPER_SULFATE);
    public static final MaterialWrapper COPPER_SULFATE_HYDRATED = MaterialWrapper.of(() -> MaterialMisc.COPPER_SULFATE_HYDRATED);
    public static final MaterialWrapper ETHYL_CYANOACETATE = MaterialWrapper.of(() -> MaterialMisc.ETHYL_CYANOACETATE);
    public static final MaterialWrapper CYANOACRYLATE_POLYMER = MaterialWrapper.of(() -> MaterialMisc.CYANOACRYLATE_POLYMER);
    public static final MaterialWrapper ETHYL_CYANOACRYLATE = MaterialWrapper.of(() -> MaterialMisc.ETHYL_CYANOACRYLATE);
    public static final MaterialWrapper MUTATED_LIVING_SOLDER = MaterialWrapper.of(() -> MaterialMisc.MUTATED_LIVING_SOLDER);
    //#endregion

    //#region src/main/java/gtPlusPlus/core/material/MaterialsAlloy.java
    public static final MaterialWrapper STEEL_BLACK = MaterialWrapper.of(() -> MaterialsAlloy.STEEL_BLACK);
    public static final MaterialWrapper STAINLESS_STEEL = MaterialWrapper.of(() -> MaterialsAlloy.STAINLESS_STEEL);
    public static final MaterialWrapper POLYETHYLENE = MaterialWrapper.of(() -> MaterialsAlloy.POLYETHYLENE);
    public static final MaterialWrapper ENERGYCRYSTAL = MaterialWrapper.of(() -> MaterialsAlloy.ENERGYCRYSTAL);
    public static final MaterialWrapper BLOODSTEEL = MaterialWrapper.of(() -> MaterialsAlloy.BLOODSTEEL);
    public static final MaterialWrapper STABALLOY = MaterialWrapper.of(() -> MaterialsAlloy.STABALLOY);
    public static final MaterialWrapper TANTALLOY_60 = MaterialWrapper.of(() -> MaterialsAlloy.TANTALLOY_60);
    public static final MaterialWrapper TANTALLOY_61 = MaterialWrapper.of(() -> MaterialsAlloy.TANTALLOY_61);
    public static final MaterialWrapper TUMBAGA = MaterialWrapper.of(() -> MaterialsAlloy.TUMBAGA);
    public static final MaterialWrapper POTIN = MaterialWrapper.of(() -> MaterialsAlloy.POTIN);
    public static final MaterialWrapper INCONEL_625 = MaterialWrapper.of(() -> MaterialsAlloy.INCONEL_625);
    public static final MaterialWrapper INCONEL_690 = MaterialWrapper.of(() -> MaterialsAlloy.INCONEL_690);
    public static final MaterialWrapper INCONEL_792 = MaterialWrapper.of(() -> MaterialsAlloy.INCONEL_792);
    public static final MaterialWrapper NITINOL_60 = MaterialWrapper.of(() -> MaterialsAlloy.NITINOL_60);
    public static final MaterialWrapper ZERON_100 = MaterialWrapper.of(() -> MaterialsAlloy.ZERON_100);
    public static final MaterialWrapper MARAGING250 = MaterialWrapper.of(() -> MaterialsAlloy.MARAGING250);
    public static final MaterialWrapper MARAGING300 = MaterialWrapper.of(() -> MaterialsAlloy.MARAGING300);
    public static final MaterialWrapper MARAGING350 = MaterialWrapper.of(() -> MaterialsAlloy.MARAGING350);
    public static final MaterialWrapper AQUATIC_STEEL = MaterialWrapper.of(() -> MaterialsAlloy.AQUATIC_STEEL);
    public static final MaterialWrapper STELLITE = MaterialWrapper.of(() -> MaterialsAlloy.STELLITE);
    public static final MaterialWrapper TALONITE = MaterialWrapper.of(() -> MaterialsAlloy.TALONITE);
    public static final MaterialWrapper HASTELLOY_W = MaterialWrapper.of(() -> MaterialsAlloy.HASTELLOY_W);
    public static final MaterialWrapper HASTELLOY_X = MaterialWrapper.of(() -> MaterialsAlloy.HASTELLOY_X);
    public static final MaterialWrapper HASTELLOY_N = MaterialWrapper.of(() -> MaterialsAlloy.HASTELLOY_N);
    public static final MaterialWrapper HASTELLOY_C276 = MaterialWrapper.of(() -> MaterialsAlloy.HASTELLOY_C276);
    public static final MaterialWrapper INCOLOY_020 = MaterialWrapper.of(() -> MaterialsAlloy.INCOLOY_020);
    public static final MaterialWrapper INCOLOY_DS = MaterialWrapper.of(() -> MaterialsAlloy.INCOLOY_DS);
    public static final MaterialWrapper INCOLOY_MA956 = MaterialWrapper.of(() -> MaterialsAlloy.INCOLOY_MA956);
    public static final MaterialWrapper TUNGSTEN_CARBIDE = MaterialWrapper.of(() -> MaterialsAlloy.TUNGSTEN_CARBIDE);
    public static final MaterialWrapper TUNGSTEN_TITANIUM_CARBIDE = MaterialWrapper.of(() -> MaterialsAlloy.TUNGSTEN_TITANIUM_CARBIDE);
    public static final MaterialWrapper SILICON_CARBIDE = MaterialWrapper.of(() -> MaterialsAlloy.SILICON_CARBIDE);
    public static final MaterialWrapper TANTALUM_CARBIDE = MaterialWrapper.of(() -> MaterialsAlloy.TANTALUM_CARBIDE);
    public static final MaterialWrapper ZIRCONIUM_CARBIDE = MaterialWrapper.of(() -> MaterialsAlloy.ZIRCONIUM_CARBIDE);
    public static final MaterialWrapper NIOBIUM_CARBIDE = MaterialWrapper.of(() -> MaterialsAlloy.NIOBIUM_CARBIDE);
    public static final MaterialWrapper ARCANITE = MaterialWrapper.of(() -> MaterialsAlloy.ARCANITE);
    public static final MaterialWrapper LEAGRISIUM = MaterialWrapper.of(() -> MaterialsAlloy.LEAGRISIUM);
    public static final MaterialWrapper EGLIN_STEEL_BASE = MaterialWrapper.of(() -> MaterialsAlloy.EGLIN_STEEL_BASE);
    public static final MaterialWrapper EGLIN_STEEL = MaterialWrapper.of(() -> MaterialsAlloy.EGLIN_STEEL);
    public static final MaterialWrapper HG1223 = MaterialWrapper.of(() -> MaterialsAlloy.HG1223);
    public static final MaterialWrapper HS188A = MaterialWrapper.of(() -> MaterialsAlloy.HS188A);
    public static final MaterialWrapper TRINIUM_TITANIUM = MaterialWrapper.of(() -> MaterialsAlloy.TRINIUM_TITANIUM);
    public static final MaterialWrapper TRINIUM_NAQUADAH = MaterialWrapper.of(() -> MaterialsAlloy.TRINIUM_NAQUADAH);
    public static final MaterialWrapper TRINIUM_NAQUADAH_CARBON = MaterialWrapper.of(() -> MaterialsAlloy.TRINIUM_NAQUADAH_CARBON);
    public static final MaterialWrapper TRINIUM_REINFORCED_STEEL = MaterialWrapper.of(() -> MaterialsAlloy.TRINIUM_REINFORCED_STEEL);
    public static final MaterialWrapper KOBOLDITE = MaterialWrapper.of(() -> MaterialsAlloy.KOBOLDITE);
    public static final MaterialWrapper HELICOPTER = MaterialWrapper.of(() -> MaterialsAlloy.HELICOPTER);
    public static final MaterialWrapper LAFIUM = MaterialWrapper.of(() -> MaterialsAlloy.LAFIUM);
    public static final MaterialWrapper CINOBITE = MaterialWrapper.of(() -> MaterialsAlloy.CINOBITE);
    public static final MaterialWrapper PIKYONIUM = MaterialWrapper.of(() -> MaterialsAlloy.PIKYONIUM);
    public static final MaterialWrapper ABYSSAL = MaterialWrapper.of(() -> MaterialsAlloy.ABYSSAL);
    public static final MaterialWrapper LAURENIUM = MaterialWrapper.of(() -> MaterialsAlloy.LAURENIUM);
    public static final MaterialWrapper BOTMIUM = MaterialWrapper.of(() -> MaterialsAlloy.BOTMIUM);
    public static final MaterialWrapper TITANSTEEL = MaterialWrapper.of(() -> MaterialsAlloy.TITANSTEEL);
    public static final MaterialWrapper OCTIRON = MaterialWrapper.of(() -> MaterialsAlloy.OCTIRON);
    public static final MaterialWrapper BLACK_TITANIUM = MaterialWrapper.of(() -> MaterialsAlloy.BLACK_TITANIUM);
    public static final MaterialWrapper BABBIT_ALLOY = MaterialWrapper.of(() -> MaterialsAlloy.BABBIT_ALLOY);
    public static final MaterialWrapper INDALLOY_140 = MaterialWrapper.of(() -> MaterialsAlloy.INDALLOY_140);
    public static final MaterialWrapper QUANTUM = MaterialWrapper.of(() -> MaterialsAlloy.QUANTUM);
    //#endregion

    //#region src/main/java/gtPlusPlus/core/material/nuclear/MaterialsFluorides.java
    public static final MaterialWrapper THORIUM_TETRAFLUORIDE = MaterialWrapper.of(() -> MaterialsFluorides.THORIUM_TETRAFLUORIDE);
    public static final MaterialWrapper THORIUM_HEXAFLUORIDE = MaterialWrapper.of(() -> MaterialsFluorides.THORIUM_HEXAFLUORIDE);
    public static final MaterialWrapper URANIUM_TETRAFLUORIDE = MaterialWrapper.of(() -> MaterialsFluorides.URANIUM_TETRAFLUORIDE);
    public static final MaterialWrapper URANIUM_HEXAFLUORIDE = MaterialWrapper.of(() -> MaterialsFluorides.URANIUM_HEXAFLUORIDE);
    public static final MaterialWrapper ZIRCONIUM_TETRAFLUORIDE = MaterialWrapper.of(() -> MaterialsFluorides.ZIRCONIUM_TETRAFLUORIDE);
    public static final MaterialWrapper BERYLLIUM_FLUORIDE = MaterialWrapper.of(() -> MaterialsFluorides.BERYLLIUM_FLUORIDE);
    public static final MaterialWrapper LITHIUM_FLUORIDE = MaterialWrapper.of(() -> MaterialsFluorides.LITHIUM_FLUORIDE);
    public static final MaterialWrapper AMMONIUM_BIFLUORIDE = MaterialWrapper.of(() -> MaterialsFluorides.AMMONIUM_BIFLUORIDE);
    public static final MaterialWrapper BERYLLIUM_HYDROXIDE = MaterialWrapper.of(() -> MaterialsFluorides.BERYLLIUM_HYDROXIDE);
    public static final MaterialWrapper AMMONIUM_TETRAFLUOROBERYLLATE = MaterialWrapper.of(() -> MaterialsFluorides.AMMONIUM_TETRAFLUOROBERYLLATE);
    public static final MaterialWrapper NEPTUNIUM_HEXAFLUORIDE = MaterialWrapper.of(() -> MaterialsFluorides.NEPTUNIUM_HEXAFLUORIDE);
    public static final MaterialWrapper TECHNETIUM_HEXAFLUORIDE = MaterialWrapper.of(() -> MaterialsFluorides.TECHNETIUM_HEXAFLUORIDE);
    public static final MaterialWrapper SELENIUM_HEXAFLUORIDE = MaterialWrapper.of(() -> MaterialsFluorides.SELENIUM_HEXAFLUORIDE);
    public static final MaterialWrapper SODIUM_FLUORIDE = MaterialWrapper.of(() -> MaterialsFluorides.SODIUM_FLUORIDE);
    //#endregion

    //#region src/main/java/gtPlusPlus/core/material/MaterialsElements.java
    public static final MaterialWrapper CHROMIUM = MaterialWrapper.of(() -> MaterialsElements.getInstance().CHROMIUM);
    public static final MaterialWrapper GERMANIUM = MaterialWrapper.of(() -> MaterialsElements.getInstance().GERMANIUM);
    public static final MaterialWrapper SELENIUM = MaterialWrapper.of(() -> MaterialsElements.getInstance().SELENIUM);
    public static final MaterialWrapper BROMINE = MaterialWrapper.of(() -> MaterialsElements.getInstance().BROMINE);
    public static final MaterialWrapper TECHNETIUM = MaterialWrapper.of(() -> MaterialsElements.getInstance().TECHNETIUM);
    public static final MaterialWrapper NEPTUNIUM = MaterialWrapper.of(() -> MaterialsElements.getInstance().NEPTUNIUM);
    public static final MaterialWrapper RHENIUM = MaterialWrapper.of(() -> MaterialsElements.getInstance().RHENIUM);
    public static final MaterialWrapper THALLIUM = MaterialWrapper.of(() -> MaterialsElements.getInstance().THALLIUM);
    public static final MaterialWrapper POLONIUM = MaterialWrapper.of(() -> MaterialsElements.getInstance().POLONIUM);
    public static final MaterialWrapper RADIUM = MaterialWrapper.of(() -> MaterialsElements.getInstance().RADIUM);
    public static final MaterialWrapper PROTACTINIUM = MaterialWrapper.of(() -> MaterialsElements.getInstance().PROTACTINIUM);
    public static final MaterialWrapper URANIUM238 = MaterialWrapper.of(() -> MaterialsElements.getInstance().URANIUM238);
    public static final MaterialWrapper CURIUM = MaterialWrapper.of(() -> MaterialsElements.getInstance().CURIUM);
    public static final MaterialWrapper FERMIUM = MaterialWrapper.of(() -> MaterialsElements.getInstance().FERMIUM);
    public static final MaterialWrapper AER = MaterialWrapper.of(() -> MaterialsElements.getInstance().AER);
    public static final MaterialWrapper IGNIS = MaterialWrapper.of(() -> MaterialsElements.getInstance().IGNIS);
    public static final MaterialWrapper TERRA = MaterialWrapper.of(() -> MaterialsElements.getInstance().TERRA);
    public static final MaterialWrapper AQUA = MaterialWrapper.of(() -> MaterialsElements.getInstance().AQUA);
    public static final MaterialWrapper PERDITIO = MaterialWrapper.of(() -> MaterialsElements.getInstance().PERDITIO);
    public static final MaterialWrapper ORDO = MaterialWrapper.of(() -> MaterialsElements.getInstance().ORDO);
    public static final MaterialWrapper NAQUADAH_ENRICHED = MaterialWrapper.of(() -> MaterialsElements.getInstance().NAQUADAH_ENRICHED);
    public static final MaterialWrapper LITHIUM7 = MaterialWrapper.of(() -> MaterialsElements.getInstance().LITHIUM7);
    public static final MaterialWrapper URANIUM232 = MaterialWrapper.of(() -> MaterialsElements.getInstance().URANIUM232);
    public static final MaterialWrapper URANIUM233 = MaterialWrapper.of(() -> MaterialsElements.getInstance().URANIUM233);
    public static final MaterialWrapper PLUTONIUM238 = MaterialWrapper.of(() -> MaterialsElements.getInstance().PLUTONIUM238);
    //#endregion

    //#region src/main/java/gtPlusPlus/core/material/nuclear/MaterialsNuclides.java
    public static final MaterialWrapper LI2BEF4 = MaterialWrapper.of(() -> MaterialsNuclides.Li2BeF4);
    public static final MaterialWrapper LIFBEF2THF4UF4 = MaterialWrapper.of(() -> MaterialsNuclides.LiFBeF2ThF4UF4);
    public static final MaterialWrapper LIFBEF2ZRF4UF4 = MaterialWrapper.of(() -> MaterialsNuclides.LiFBeF2ZrF4UF4);
    public static final MaterialWrapper LIFBEF2ZRF4U235 = MaterialWrapper.of(() -> MaterialsNuclides.LiFBeF2ZrF4U235);
    public static final MaterialWrapper BURNTLFTRFUEL_MK1 = MaterialWrapper.of(() -> MaterialsNuclides.BurntLftrFuel_MK1);
    public static final MaterialWrapper BURNTLFTRFUEL_MK2 = MaterialWrapper.of(() -> MaterialsNuclides.BurntLftrFuel_MK2);
    public static final MaterialWrapper LIFBEF2UF4FP = MaterialWrapper.of(() -> MaterialsNuclides.LiFBeF2UF4FP);
    public static final MaterialWrapper SPARGED_LIFBEF2UF4FP = MaterialWrapper.of(() -> MaterialsNuclides.Sparged_LiFBeF2UF4FP);
    public static final MaterialWrapper UF6F2FP = MaterialWrapper.of(() -> MaterialsNuclides.UF6F2FP);
    public static final MaterialWrapper LIFBEF2 = MaterialWrapper.of(() -> MaterialsNuclides.LiFBeF2);
    public static final MaterialWrapper LIFBEF2UF4 = MaterialWrapper.of(() -> MaterialsNuclides.LiFBeF2UF4);
    public static final MaterialWrapper LIFTHF4 = MaterialWrapper.of(() -> MaterialsNuclides.LiFThF4);
    public static final MaterialWrapper LIFBEF2THF4 = MaterialWrapper.of(() -> MaterialsNuclides.LiFBeF2ThF4);
    public static final MaterialWrapper SPARGED_LIFTHF4 = MaterialWrapper.of(() -> MaterialsNuclides.Sparged_LiFThF4);
    public static final MaterialWrapper SPARGED_LIFBEF2THF4 = MaterialWrapper.of(() -> MaterialsNuclides.Sparged_LiFBeF2ThF4);
    public static final MaterialWrapper UF6F2 = MaterialWrapper.of(() -> MaterialsNuclides.UF6F2);
    //#endregion
}
