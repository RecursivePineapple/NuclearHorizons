package com.recursive_pineapple.nuclear_horizons.reactors.gui;

import org.lwjgl.opengl.GL11;

import com.recursive_pineapple.nuclear_horizons.NuclearHorizons;
import com.recursive_pineapple.nuclear_horizons.reactors.tile.TileReactorCore;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.client.gui.inventory.GuiContainer;
import net.minecraft.client.resources.I18n;
import net.minecraft.entity.player.InventoryPlayer;
import net.minecraft.util.ResourceLocation;

@SideOnly(Side.CLIENT)
public class GuiReactorCore extends GuiContainer {

    private static final ResourceLocation GUI_LOCATION = new ResourceLocation(NuclearHorizons.MODID, "textures/gui/eu_reactor.png");
    private static final int GUI_WIDTH = 212;
    private static final int GUI_HEIGHT = 234;

    private static final int DISABLED_SLOT_WIDTH = 18;
    private static final int DISABLED_SLOT_HEIGHT = 18 * 9;
    private static final int DISABLED_SLOT_OFFSET_X = GUI_WIDTH;
    private static final int DISABLED_SLOT_OFFSET_Y = 0;
    private static final int DISABLED_SLOT_START_X = 25;
    private static final int DISABLED_SLOT_START_Y = 25;

    private final ContainerReactorCore container;
    private final InventoryPlayer player;
    private final TileReactorCore reactor;

    public GuiReactorCore(InventoryPlayer player, TileReactorCore reactor) {
        super(new ContainerReactorCore(player, reactor));
        this.allowUserInput = false;

        this.container = (ContainerReactorCore)this.inventorySlots;
        this.player = player;
        this.reactor = reactor;

        this.xSize = GUI_WIDTH;
        this.ySize = GUI_HEIGHT;
    }

    protected void drawGuiContainerForegroundLayer(int mouseX, int mouseY) {
        String reactorName = this.reactor.hasCustomInventoryName() ? this.reactor.getInventoryName() : I18n.format(this.reactor.getInventoryName(), new Object[0]);
        this.fontRendererObj.drawString(
            reactorName,
            (8 + this.xSize - this.fontRendererObj.getStringWidth(reactorName)) /2,
            6,
            4210752
        );
        this.fontRendererObj.drawString(
            this.player.hasCustomInventoryName()
                ? this.player.getInventoryName()
                : I18n.format(this.player.getInventoryName(), new Object[0]),
            8 + 18,
            this.ySize - 96 + 2,
            4210752
        );

        this.fontRendererObj.drawString(
            "HU: " + this.container.getHeat(),
            100,
            this.ySize - 96 + 2,
            4210752
        );

        this.fontRendererObj.drawString(
            "EU/t: " + (this.container.getEUPerSecond() / 20),
            150,
            this.ySize - 96 + 2,
            4210752
        );
    }

    @Override
    protected void drawGuiContainerBackgroundLayer(float partialTicks, int mouseX, int mouseY) {
	    GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
        this.mc.renderEngine.bindTexture(GUI_LOCATION);

        this.zLevel = 0f;
        drawTexturedModalRect(guiLeft, guiTop, 0, 0, xSize, ySize);

        this.zLevel = 1f;
        for(int col = reactor.getColumnCount(); col < 9; col++) {
            drawTexturedModalRect(
                guiLeft + DISABLED_SLOT_START_X + DISABLED_SLOT_WIDTH * col,
                guiTop + DISABLED_SLOT_START_Y,
                DISABLED_SLOT_OFFSET_X, DISABLED_SLOT_OFFSET_Y,
                DISABLED_SLOT_WIDTH,
                DISABLED_SLOT_HEIGHT
            );
        }
    }
}
