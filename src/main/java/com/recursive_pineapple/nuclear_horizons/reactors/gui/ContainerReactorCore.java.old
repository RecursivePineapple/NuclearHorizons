package com.recursive_pineapple.nuclear_horizons.reactors.gui;

import java.util.Objects;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import com.recursive_pineapple.nuclear_horizons.reactors.components.ComponentRegistry;
import com.recursive_pineapple.nuclear_horizons.reactors.tile.TileReactorCore;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.InventoryPlayer;
import net.minecraft.inventory.Container;
import net.minecraft.inventory.ICrafting;
import net.minecraft.inventory.IInventory;
import net.minecraft.inventory.Slot;
import net.minecraft.item.ItemStack;

public class ContainerReactorCore extends Container {

    private static final int BORDER_SIZE = 7;
    private static final int SLOT_SIZE = 18;
    private static final int HORZ_SLOTS = 9;
    private static final int REACTOR_ROWS = 6;
    private static final int HOTBAR_ROW = 9;
    private static final int HOTBAR_GAP = 4;

    private final InventoryPlayer player;
    private final TileReactorCore reactor;

    private int sentHeat = 0;
    private int sentEURate = 0;
    private int sentIsFluid = 0;
    private int sentCoolant = 0;
    private int sentMaxCoolant = 0;
    private int sentHotCoolant = 0;
    private int sentMaxHotCoolant = 0;

    public ContainerReactorCore(InventoryPlayer player, TileReactorCore reactor) {
        Objects.requireNonNull(player);
        Objects.requireNonNull(reactor);
        this.player = player;
        this.reactor = reactor;

        this.reactor.addViewingPlayer(player.player);

        int colCount = reactor.getColumnCount();
        for(int row = 0; row < REACTOR_ROWS; row++) {
            for(int col = 0; col < colCount; col++) {
                this.addSlotToContainer(new ReactorSlot(reactor, col + row * colCount, getSlotLeft(col), getSlotTop(row)));
            }
        }

        for (int row = 0; row < 3; ++row) {
            for (int col = 0; col < 9; ++col) {
                int x = getSlotLeft(col);
                int y = getSlotTop(row + REACTOR_ROWS);

                this.addSlotToContainer(new Slot(player, col + row * 9 + 9, x, y));
            }
        }

        for (int col = 0; col < 9; ++col) {
            int x = getSlotLeft(col);
            int y = getSlotTop(3 + REACTOR_ROWS);
            this.addSlotToContainer(new Slot(player, col, x, y));
        }
    }

    @Override
    public void onContainerClosed(EntityPlayer p_75134_1_) {
        super.onContainerClosed(p_75134_1_);

        this.reactor.removeViewingPlayer(p_75134_1_);
    }

    private static int getSlotLeft(int slotX) {
        return BORDER_SIZE + SLOT_SIZE * (1 + slotX) + 1;
    }

    private static int getSlotTop(int slotY) {
        if(slotY > REACTOR_ROWS - 1) {
            slotY += 1;
        }

        int extra = 0;

        if(slotY > HOTBAR_ROW) {
            extra += HOTBAR_GAP;
        }

        return BORDER_SIZE + SLOT_SIZE * (1 + slotY) + extra + 1;
    }

    @Override
    public boolean canInteractWith(EntityPlayer player) {
        return true;
    }

    @Override
    public ItemStack transferStackInSlot(EntityPlayer player, int slotIndex) {
        ItemStack itemstack = null;
        Slot slot = (Slot)this.inventorySlots.get(slotIndex);

        if (slot != null && slot.getHasStack()) {
            ItemStack stackInSlot = slot.getStack();
            itemstack = stackInSlot.copy();

            int colCount = reactor.getColumnCount();

            if (slotIndex < REACTOR_ROWS * colCount) {
                if (!this.mergeItemStack(stackInSlot, REACTOR_ROWS * colCount, this.inventorySlots.size(), true)) {
                    return null;
                }
            } else {
                if(!this.mergeItemStack(stackInSlot, 0, REACTOR_ROWS * colCount, false)) {
                    return null;
                }
            }

            if (stackInSlot.stackSize == 0) {
                slot.putStack((ItemStack)null);
                slot.onSlotChanged();
            }
        }

        return itemstack;
    }

    private static boolean canMergeInto(@Nonnull ItemStack from, @Nullable ItemStack into) {
        if(into == null) {
            return true;
        }

        if(from.getItem() != into.getItem()) {
            return false;
        }

        if(from.getItemDamage() != into.getItemDamage()) {
            return false;
        }

        if(!ItemStack.areItemStackTagsEqual(from, into)) {
            return false;
        }

        return true;
    }

    @Override
    protected boolean mergeItemStack(ItemStack itemStack, int startSlot, int endSlot, boolean startFromEnd) {
        boolean movedAnItem = false;

        if (itemStack.isStackable()) {
            int currentSlot = startFromEnd ? endSlot - 1 : startSlot;

            // first pass: try to merge into an existing stack
            while (itemStack.stackSize > 0 && (startFromEnd ? currentSlot >= startSlot : currentSlot < endSlot)) {
                Slot slot = (Slot)this.inventorySlots.get(currentSlot);

                if (startFromEnd) {
                    --currentSlot;
                } else {
                    ++currentSlot;
                }

                if(!slot.isItemValid(itemStack)) {
                    continue;
                }

                ItemStack stackInSlot = slot.getStack();

                if (stackInSlot != null && canMergeInto(itemStack, stackInSlot)) {
                    int maxStackSize = Math.min(slot.getSlotStackLimit(), stackInSlot.getMaxStackSize());
                    int remaining = maxStackSize - stackInSlot.stackSize;

                    int moved = itemStack.stackSize > remaining ? remaining - itemStack.stackSize : itemStack.stackSize;

                    if(moved > 0) {
                        itemStack.stackSize -= moved;
                        stackInSlot.stackSize += moved;
                        slot.onSlotChanged();
                        movedAnItem = true;
                    }
                }
            }
        }

        if (itemStack.stackSize > 0) {
            int currentSlot = startFromEnd ? endSlot - 1 : startSlot;

            // second pass: try to merge into an empty slot
            while (itemStack.stackSize > 0 && (startFromEnd ? currentSlot >= startSlot : currentSlot < endSlot)) {
                Slot slot = (Slot)this.inventorySlots.get(currentSlot);

                if (startFromEnd) {
                    --currentSlot;
                } else {
                    ++currentSlot;
                }

                if(!slot.isItemValid(itemStack)) {
                    continue;
                }

                ItemStack stackInSlot = slot.getStack();

                if (stackInSlot == null) {
                    int moved = Math.min(itemStack.stackSize, slot.getSlotStackLimit());

                    if(moved > 0) {
                        var copy = itemStack.copy();
                        itemStack.stackSize -= moved;
                        copy.stackSize = moved;
                        slot.putStack(copy);
                        slot.onSlotChanged();
                        movedAnItem = true;
                    }
                }
            }
        }

        return movedAnItem;
    }

    private static final int HEAT_ID = 0, EU_RATE_ID = 1, IS_FLUID_ID = 2, COOLANT_ID = 3, MAX_COOLANT_ID = 4, HOT_COOLANT_ID = 5, MAX_HOT_COOLANT_ID = 6;

    @Override
    public void detectAndSendChanges() {
        super.detectAndSendChanges();

        int nextHeat = this.reactor.getHullHeat();
        int nextEURate = this.reactor.getEUPerSecond();
        int nextIsFluid = this.reactor.isFluid() ? 1 : 0;
        int nextCoolant = this.reactor.getStoredCoolant();
        int nextMaxCoolant = this.reactor.getMaxCoolant();
        int nextHotCoolant = this.reactor.getStoredHotCoolant();
        int nextMaxHotCoolant = this.reactor.getMaxHotCoolant();

        for (ICrafting icrafting : this.crafters) {
            if(this.sentHeat != nextHeat) {
                icrafting.sendProgressBarUpdate(this, HEAT_ID, nextHeat);
            }

            if(this.sentEURate != nextEURate) {
                icrafting.sendProgressBarUpdate(this, EU_RATE_ID, nextEURate);
            }

            if(this.sentEURate != nextEURate) {
                icrafting.sendProgressBarUpdate(this, EU_RATE_ID, nextEURate);
            }
        }

        this.sentHeat = this.reactor.getHullHeat();
        this.sentEURate = this.reactor.getEUPerSecond();
    }

    @Override
    public void updateProgressBar(int param, int value) {
        super.updateProgressBar(param, value);

        switch(param) {
            case 0: {
                this.sentHeat = value;
                break;
            }
            case 1: {
                this.sentEURate = value;
                break;
            }
        }
    }

    public int getHeat() {
        return this.sentHeat;
    }

    public int getEUPerSecond() {
        return this.sentEURate;
    }

    private static class ReactorSlot extends Slot {

        public ReactorSlot(IInventory p_i1824_1_, int p_i1824_2_, int p_i1824_3_, int p_i1824_4_) {
            super(p_i1824_1_, p_i1824_2_, p_i1824_3_, p_i1824_4_);
        }

        @Override
        public boolean isItemValid(ItemStack stack) {
            return ComponentRegistry.isReactorItem(stack);
        }

        @Override
        public int getSlotStackLimit() {
            return 1;
        }
    }
    
}
